<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端资源部</title>
  
  <subtitle>Newming(钮旭明) 的前端笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://newming.github.io/"/>
  <updated>2018-03-05T06:02:14.052Z</updated>
  <id>https://newming.github.io/</id>
  
  <author>
    <name>Newming(钮旭明)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入理解 margin collapse 及 BFC</title>
    <link href="https://newming.github.io/2018/03/05/margin-collapse/"/>
    <id>https://newming.github.io/2018/03/05/margin-collapse/</id>
    <published>2018-03-05T04:59:18.000Z</published>
    <updated>2018-03-05T06:02:14.052Z</updated>
    
    <content type="html"><![CDATA[<p>外边距融合对于前端的同学应该是不陌生，之前当我遇到这种问题时，可能很多人随手换个 css 属性解决后即不在思考或总结这个问题的解决办法，前几天看到这么一个<a href="https://github.com/wintercn/blog/issues/4" target="_blank" rel="external">讨论</a>，发现出现了很多之前没有见过的 css 方面的名次，感觉需要去深入的了解一下这块了。</p><p>这节内容主要说明 margin collapse 及 BFC 这两个东西，主要参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing" target="_blank" rel="external">MDN</a> 及 <a href="https://css-tricks.com/what-you-should-know-about-collapsing-margins/" target="_blank" rel="external">css tricks</a>，<a href="https://www.w3cplus.com/css/understanding-bfc-and-margin-collapse.html" target="_blank" rel="external">Pet 的博客</a> 的这几篇文章。</p><h2 id="margin-collapse"><a href="#margin-collapse" class="headerlink" title="margin collapse"></a>margin collapse</h2><p>块的顶部外边距和底部外边距有时被组合(折叠)为单个外边距，其大小是组合到其中的最大外边距，这种行为称为<strong>外边距塌陷</strong>(margin collapsing)，有的地方翻译为<strong>外边距合并</strong>。</p><p>发生外边距塌陷的三种基本情况:</p><h3 id="相邻的兄弟姐妹元素"><a href="#相邻的兄弟姐妹元素" class="headerlink" title="相邻的兄弟姐妹元素"></a>相邻的兄弟姐妹元素</h3><p>毗邻的两个兄弟元素之间的外边距会塌陷（除非后者兄弟姐妹需要清除过去的浮动）。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"margin-bottom: 30px;"</span>&gt;</span>这个段落的下外边距被合并...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"margin-top: 20px;"</span>&gt;</span>...这个段落的上外边距被合并。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr></table></figure><p>可以发现这两个段落中间的距离，不是 ”上面段落的下边距“ 与 ”下面段落的上边距“ 的 求和 ，而是两者中的较大者（在此示例中为30px）。</p><h3 id="块级父元素与其第一个-最后一个子元素"><a href="#块级父元素与其第一个-最后一个子元素" class="headerlink" title="块级父元素与其第一个/最后一个子元素"></a>块级父元素与其第一个/最后一个子元素</h3><p>如果块级父元素中，不存在上边框、上内边距、内联元素、块格式化上下文、 清除浮动 这五条（也可以说，当上边框宽度及上内边距距离为0时），那么这个块级元素和其第一个子元素的上边距就可以说”挨到了一起“。此时这个块级父元素和其第一个子元素就会发生上外边距合并现象，换句话说，此时这个父元素对外展现出来的外边距将直接变成这个父元素和其第一个子元素的margin-top的较大者。<br>类似的，若块级父元素的 margin-bottom 与它的最后一个子元素的margin-bottom 之间没有父元素的 border、padding、inline content、height、min-height、 max-height 分隔时，就会发生 下外边距合并 现象。</p><h3 id="空块元素"><a href="#空块元素" class="headerlink" title="空块元素"></a>空块元素</h3><p>如果存在一个空的块级元素，其 border、padding、inline content、height、min-height 都不存在。那么此时它的上下边距中间将没有任何阻隔，此时它的上下外边距将会合并。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"margin-bottom: 0px;"</span>&gt;</span>这个段落的和下面段落的距离将为20px<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="line"></span><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-top: 20px; margin-bottom: 20px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="line"></span><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"margin-top: 0px;"</span>&gt;</span>这个段落的和上面段落的距离将为20px<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr></table></figure><p>当以上情形同时出现时，外边距合并会更加复杂（会比较两个以上外边距来最终计算出真实的边距值）。</p><p>即使外边距为0，这些规则也仍旧生效。因此，无论父元素的外边距是否为0，第一个或者最后一个子元素的外边距会被父元素的外边距”截断”(根据上面的规则)，在负外边距的情况下，合并后的外边距为最大正外边距与最小负外边距之和。</p><p>当有负边距存在时，合并后的外边距将是最大正边距加上最小负边距（即负边距中绝对值最大的一个）。</p><p>如两个兄弟元素，上面的元素的下边距为 20px ，下面的元素的上边距为 -20px ，那么发生外边距合并后，这两个元素的实际距离将变成 0px 。</p><p>BFC（Block Formatting Context 块格式化上下文）与元素外边距合并 :</p><ul><li>当两个元素属于不同的BFC时，这两个元素的外边距不会合并。</li><li>但在同一个BFC内，两个相邻元素的外边距仍会合并。</li></ul><p>具体 margin collapse 问题怎么表现，可以看 <a href="https://css-tricks.com/what-you-should-know-about-collapsing-margins/" target="_blank" rel="external">css tricks</a> 的文章，里边有具体的例子及代码。</p><p><strong>怎么解决呢</strong></p><p>其实解决办法很简单，css tricks 上是用的 padding。其实只要存在 上边框、上内边距、内联元素、块格式化上下文、 清除浮动 这些属性，就不会有 margin collapse 问题。</p><h2 id="块格式化上下文"><a href="#块格式化上下文" class="headerlink" title="块格式化上下文"></a>块格式化上下文</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="external">MDN BFC</a></p><p><strong>块格式化上下文(Block Formatting Context，BFC)</strong>，是Web页面的可视化CSS渲染的部分，是块级盒布局发生的区域，也是浮动元素与其他元素交互的区域。</p><p>创建块格式化上下文的方式如下：</p><ul><li>根元素或其它包含它的元素</li><li>浮动元素 (元素的 float 不是 none)</li><li>绝对定位元素 (元素的 position 为 absolute 或 fixed)</li><li>内联块元素 (元素具有 display: inline-block)</li><li>表格单元格 (元素具有 display: table-cell，HTML表格单元格默认属性)</li><li>表格标题 (元素具有 display: table-caption, HTML表格标题默认属性)</li><li>匿名表格元素 (元素具有 display: table, table-row, table-row-group, table-header-group, table-footer-group [分别是HTML tables, table rows, table bodies, table headers and table footers的默认属性]，或 inline-table )</li><li>overflow 值不为 visible 的块元素，</li><li>display 值为 flow-root 的元素</li><li>contain 值为 layout, content, 或 strict 的元素</li><li>弹性元素 (display: flex 或 inline-flex元素的子元素)</li><li>网格元素 (display: grid 或 inline-grid 元素的子元素)</li><li>多列容器 (元素的 column-count 或 column-width 不为 auto 即视为多列，column-count: 1的元素也属于多列)</li><li>即便具有 column-span: all 的元素没有被包裹在一个多列容器中，column-span: all 也始终会创建一个新的格式化上下文。</li><li>块格式化上下文包含创建它的元素内的所有内容。</li></ul><p>块格式化上下文对于定位 (参见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/float" target="_blank" rel="external">float</a>) 与清除浮动 (参见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/clear" target="_blank" rel="external">clear</a>) 很重要。定位和清除浮动的样式规则只适用于处于同一块格式化上下文内的元素。浮动不会影响其它块格式化上下文中元素的布局，并且清除浮动只能清除同一块格式化上下文中在它前面的元素的浮动。</p><blockquote><p>注意：Margin collapsing也只发生在属于同一块格式化上下文的块级元素之间。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;外边距融合对于前端的同学应该是不陌生，之前当我遇到这种问题时，可能很多人随手换个 css 属性解决后即不在思考或总结这个问题的解决办法，前几天看到这么一个&lt;a href=&quot;https://github.com/wintercn/blog/issues/4&quot; target=&quot;
      
    
    </summary>
    
      <category term="前端" scheme="https://newming.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="https://newming.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>css 伪类及伪元素</title>
    <link href="https://newming.github.io/2018/03/02/css%E4%BC%AA%E7%B1%BB%E5%8F%8A%E4%BC%AA%E5%85%83%E7%B4%A0/"/>
    <id>https://newming.github.io/2018/03/02/css伪类及伪元素/</id>
    <published>2018-03-02T13:00:35.000Z</published>
    <updated>2018-03-05T05:48:47.232Z</updated>
    
    <content type="html"><![CDATA[<p>前几天在用 bootstrap 4 的时候发现了 <code>:root</code> 这个陌生的 css 伪类，到 mdn 上一查发现了很多之前没见过的，还有 css 中竟然可以定义变量了，还有不少伪元素，其中有一些修改表单默认控件样式的，所以决定一起看一下，记一下。</p><h2 id="css-伪类"><a href="#css-伪类" class="headerlink" title="css 伪类"></a>css 伪类</h2><ul><li><code>:active</code>: 匹配被用户激活的元素。常用于 a, button 元素</li><li><code>:any</code>: <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:any" target="_blank" rel="external">mdn 文档</a> 可以让您快速构建类似的选择器集合，通过建立包含所有包含项的组来匹配。</li><li><code>:any-link</code>: 代表一个有链接锚点的元素，而不管它是否被访问过，也就是说，它会匹配每一个有 href 属性的 &lt;a&gt;、&lt;area&gt; 或 &lt;link&gt; 元素。因此，它会匹配到所有的 :link 或 :visited。</li><li><code>:checked</code>: 表示任何处于选中状态的radio(&lt;input type=”radio”&gt;), checkbox (&lt;input type=”checkbox”&gt;) 或(“select”) 元素中的option HTML元素(“option”)) 。</li><li><code>:default</code>: 表示一组相关元素中的默认表单元素。</li><li><code>:defined</code>: 匹配定义的元素。</li><li><code>:dir()</code>: 匹配包含定义文本方向的元素。可选值为 ltr(从左到右), rtl(从右到左)。例如：&lt;div dir=”ltr”&gt;test2&lt;/div&gt;</li><li><code>:disabled</code>: 匹配禁用元素。</li><li><code>:empty</code>: 匹配任何没有子元素的元素。子元素可以是元素节点或者文本。</li><li><code>:enabled</code>: 匹配没有被禁用的元素。</li><li><code>:first</code>: 匹配第一个页面。与 @page 配合使用。</li><li><code>:first-child</code>: 匹配一组元素中第一个元素节点。</li><li><code>:first-of-type</code>: 匹配一组相邻元素中第一个所选类型元素。</li><li><code>:fullscreen</code>: 匹配进入全屏的元素。</li><li><code>:focus</code>: 匹配获得焦点的元素。</li><li><code>:focus-within</code>: 匹配或得焦点或者其内部子元素或得焦点的元素。</li><li><code>:hover</code>: 匹配鼠标移上的元素。</li><li><code>:indeterminate</code>: 匹配任何状态为 indeterminate 的表单元素。</li><li><code>:in-range</code>: 匹配当前的 value 没有超过可选范围的表单元素。</li><li><code>:invalid</code>: 匹配任何 form 或 input 中内容不合法的元素。</li><li><code>:lang()</code>: 匹配包含语言设置的元素。&lt;div lang=”en”&gt;&lt;/div&gt;</li><li><code>:last-child</code>: 匹配一组元素中最后一个所选元素。</li><li><code>:last-of-type</code>: 匹配一组相邻元素中最后一个该类型的元素。</li><li><code>:left</code>: 和 @page 配合，匹配所有按 left-hand 输出的页面。</li><li><code>:link</code>: 匹配包含 href 属性的并且没有被 visited 的元素。</li><li><code>:not()</code>: 匹配一系列不在选取范围的元素。</li><li><code>:nth-child(n)</code>: 匹配第 n 个元素。</li><li><code>:nth-last-child()</code>: 从末尾开始匹配。</li><li><code>:nth-last-of-type()</code>: 从末尾按类型匹配。</li><li><code>:nth-of-type(n)</code>: 按类型位置进行匹配。</li><li><code>:only-child</code>: 匹配没有兄弟元素的元素。</li><li><code>:only-of-type</code>: 匹配没有兄弟元素的符合类型的元素。</li><li><code>:optional</code>: 匹配没有设置 required 的表单元素。</li><li><code>:out-of-range</code>: 与 in-range 相反，匹配 value 超出范围的元素。</li><li><code>:placeholder-shown</code>: 匹配当前展示出 placeholder 文本的表单。</li><li><code>:read-only</code>: 匹配只读的表单元素。 &lt;input type=”text” value=”This is a read-only field.” readonly&gt;</li><li><code>:read-write</code>: 匹配可以读写的元素。包括 contenteditable 为 true 的元素。</li><li><code>:required</code>: 匹配设置了 required 的表单元素。</li><li><code>:right</code>: 与 @page 配合，匹配所有按 right-hand 输出的页面。</li><li><code>:root</code>: 匹配文档的根元素，即 html。</li><li><code>:socpe</code>:</li><li><code>:target</code>:</li><li><code>:valid</code>: 匹配表单 value 合法的元素。</li><li><code>:visited</code>: 匹配点击过的 a 元素。</li></ul><h2 id="css-伪元素"><a href="#css-伪元素" class="headerlink" title="css 伪元素"></a>css 伪元素</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::-ms-fill" target="_blank" rel="external">mdn</a></p><ul><li><code>::moz-progress-bar</code>: 进度条 progress 样式控制</li><li><code>::moz-range-progress</code>: input type range 的滑过进度样式</li><li><code>::moz-range-thumb</code>: input type range 的滑块样式</li><li><code>::moz-range-track</code>: input type range 的背景条样式</li><li><code>::ms-browse</code>: input type file 的 button 的样式</li><li><code>::ms-check</code>: radio, checkbox 的选框样式</li><li><code>::ms-clear</code>: IE input text 框自带 x(清除) 样式</li><li><code>::ms-expand</code>: IE select option 的样式</li><li><code>::ms-fill</code>: IE progress 的样式</li><li><code>::ms-fill-lower</code>: IE input range 的样式</li><li><code>::ms-fill-upper</code>: IE input range 的样式</li><li><code>::ms-thumb</code>: IE input range 的样式</li><li><code>::ms-track</code>: IE input range 的样式</li><li><code>::ms-reveal</code>: IE input password 的样式</li><li><code>::webkit-progress-bar</code>: progress 的样式</li><li><code>::webkit-progress-value</code>: progress 的样式</li><li><code>::webkit-slider-runnable-track</code>: input range 的样式</li><li><code>::webkit-slider-thumb</code>: input range 的样式</li><li><code>::after</code>: <code>:after</code></li><li><code>::backdrop</code>:</li><li><code>::before</code>: <code>:after</code></li><li><code>::cue</code>:</li><li><code>::first-letter</code>: 第一个单词</li><li><code>::first-line</code>: 第一行文本</li><li><code>::grammar-error</code>: 语法错误</li><li><code>::spelling-error</code>: 拼写错误</li><li><code>::placeholder</code>: placeholder 文本样式</li><li><code>::selection</code>: 当文本被选中时的样式</li></ul><h2 id="css-变量"><a href="#css-变量" class="headerlink" title="css 变量"></a>css 变量</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span> 变量申明 <span class="selector-tag">--</span>&gt;</span><span class="line"><span class="selector-tag">element</span> &#123;</span><span class="line">  <span class="attribute">--main-bg-color</span>: brown;</span><span class="line">&#125;</span><span class="line"></span><span class="line">&lt;!<span class="selector-tag">--</span> 变量调用 <span class="selector-tag">--</span>&gt;</span><span class="line"><span class="selector-tag">element</span> &#123;</span><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--main-bg-color);</span><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前几天在用 bootstrap 4 的时候发现了 &lt;code&gt;:root&lt;/code&gt; 这个陌生的 css 伪类，到 mdn 上一查发现了很多之前没见过的，还有 css 中竟然可以定义变量了，还有不少伪元素，其中有一些修改表单默认控件样式的，所以决定一起看一下，记一下。&lt;/
      
    
    </summary>
    
      <category term="前端" scheme="https://newming.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="https://newming.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>js-cookie</title>
    <link href="https://newming.github.io/2018/01/31/js-cookie/"/>
    <id>https://newming.github.io/2018/01/31/js-cookie/</id>
    <published>2018-01-31T02:43:36.000Z</published>
    <updated>2018-03-05T05:53:54.835Z</updated>
    
    <content type="html"><![CDATA[<p>最近做了一个需要在不同二级域名的两个项目之间进行通知，尝试了 iframe 方式，发现在移动端失败，于是打算通过 cookie 来进行消息通知。所以去找了前端操作 cookie 的库，后来找到 <a href="https://github.com/js-cookie/js-cookie" target="_blank" rel="external">js-cookie</a> 这个库。由于之前操作 cookie 的经历有限，所以特意去阅读了源码并总结。</p><h2 id="源码如下："><a href="#源码如下：" class="headerlink" title="源码如下："></a>源码如下：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span><span class="line">45</span><span class="line">46</span><span class="line">47</span><span class="line">48</span><span class="line">49</span><span class="line">50</span><span class="line">51</span><span class="line">52</span><span class="line">53</span><span class="line">54</span><span class="line">55</span><span class="line">56</span><span class="line">57</span><span class="line">58</span><span class="line">59</span><span class="line">60</span><span class="line">61</span><span class="line">62</span><span class="line">63</span><span class="line">64</span><span class="line">65</span><span class="line">66</span><span class="line">67</span><span class="line">68</span><span class="line">69</span><span class="line">70</span><span class="line">71</span><span class="line">72</span><span class="line">73</span><span class="line">74</span><span class="line">75</span><span class="line">76</span><span class="line">77</span><span class="line">78</span><span class="line">79</span><span class="line">80</span><span class="line">81</span><span class="line">82</span><span class="line">83</span><span class="line">84</span><span class="line">85</span><span class="line">86</span><span class="line">87</span><span class="line">88</span><span class="line">89</span><span class="line">90</span><span class="line">91</span><span class="line">92</span><span class="line">93</span><span class="line">94</span><span class="line">95</span><span class="line">96</span><span class="line">97</span><span class="line">98</span><span class="line">99</span><span class="line">100</span><span class="line">101</span><span class="line">102</span><span class="line">103</span><span class="line">104</span><span class="line">105</span><span class="line">106</span><span class="line">107</span><span class="line">108</span><span class="line">109</span><span class="line">110</span><span class="line">111</span><span class="line">112</span><span class="line">113</span><span class="line">114</span><span class="line">115</span><span class="line">116</span><span class="line">117</span><span class="line">118</span><span class="line">119</span><span class="line">120</span><span class="line">121</span><span class="line">122</span><span class="line">123</span><span class="line">124</span><span class="line">125</span><span class="line">126</span><span class="line">127</span><span class="line">128</span><span class="line">129</span><span class="line">130</span><span class="line">131</span><span class="line">132</span><span class="line">133</span><span class="line">134</span><span class="line">135</span><span class="line">136</span><span class="line">137</span><span class="line">138</span><span class="line">139</span><span class="line">140</span><span class="line">141</span><span class="line">142</span><span class="line">143</span><span class="line">144</span><span class="line">145</span><span class="line">146</span><span class="line">147</span><span class="line">148</span><span class="line">149</span><span class="line">150</span><span class="line">151</span><span class="line">152</span><span class="line">153</span><span class="line">154</span><span class="line">155</span><span class="line">156</span><span class="line">157</span><span class="line">158</span><span class="line">159</span><span class="line">160</span><span class="line">161</span><span class="line">162</span><span class="line">163</span><span class="line">164</span><span class="line">165</span><span class="line">166</span><span class="line">167</span><span class="line">168</span><span class="line">169</span><span class="line">170</span><span class="line">171</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!</span></span><span class="line"><span class="comment"> * JavaScript Cookie v2.2.0</span></span><span class="line"><span class="comment"> * https://github.com/js-cookie/js-cookie</span></span><span class="line"><span class="comment"> *</span></span><span class="line"><span class="comment"> * Copyright 2006, 2015 Klaus Hartl &amp; Fagner Brack</span></span><span class="line"><span class="comment"> * Released under the MIT license</span></span><span class="line"><span class="comment"> */</span></span><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">factory</span>) </span>&#123;</span><span class="line">  <span class="comment">// 各种方式的模块定义</span></span><span class="line"><span class="keyword">var</span> registeredInModuleLoader = <span class="literal">false</span>;</span><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><span class="line">define(factory);</span><span class="line">registeredInModuleLoader = <span class="literal">true</span>;</span><span class="line">&#125;</span><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) &#123;</span><span class="line"><span class="built_in">module</span>.exports = factory();</span><span class="line">registeredInModuleLoader = <span class="literal">true</span>;</span><span class="line">&#125;</span><span class="line"><span class="keyword">if</span> (!registeredInModuleLoader) &#123;</span><span class="line"><span class="keyword">var</span> OldCookies = <span class="built_in">window</span>.Cookies;</span><span class="line"><span class="keyword">var</span> api = <span class="built_in">window</span>.Cookies = factory();</span><span class="line">api.noConflict = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><span class="line"><span class="built_in">window</span>.Cookies = OldCookies;</span><span class="line"><span class="keyword">return</span> api;</span><span class="line">&#125;;</span><span class="line">&#125;</span><span class="line">&#125;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><span class="line">  <span class="comment">// 对象拼接方法</span></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span> (<span class="params"></span>) </span>&#123;</span><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><span class="line"><span class="keyword">var</span> result = &#123;&#125;;</span><span class="line"><span class="keyword">for</span> (; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><span class="line"><span class="keyword">var</span> attributes = <span class="built_in">arguments</span>[ i ];</span><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> attributes) &#123;</span><span class="line">result[key] = attributes[key];</span><span class="line">&#125;</span><span class="line">&#125;</span><span class="line"><span class="keyword">return</span> result;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span> (<span class="params">converter</span>) </span>&#123;</span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">api</span> (<span class="params">key, value, attributes</span>) </span>&#123;</span><span class="line"><span class="keyword">var</span> result;</span><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">document</span> === <span class="string">'undefined'</span>) &#123;</span><span class="line"><span class="keyword">return</span>;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">// Write 当参数大于 1 的时候认为是 write 操作</span></span><span class="line"><span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">1</span>) &#123;</span><span class="line">        <span class="comment">// 拼接参数及默认参数</span></span><span class="line">attributes = extend(&#123;</span><span class="line">path: <span class="string">'/'</span></span><span class="line">&#125;, api.defaults, attributes);</span><span class="line">        <span class="comment">// 设置过期时间， attributes.expires 是一个数字，代表过期天数</span></span><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> attributes.expires === <span class="string">'number'</span>) &#123;</span><span class="line">          <span class="keyword">var</span> expires = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><span class="line">          <span class="comment">// 获取当前时间，在加上 attributes.expires 的天数 864e+5 是一天的毫秒数</span></span><span class="line">expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * <span class="number">864e+5</span>);</span><span class="line">attributes.expires = expires;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">// We're using "expires" because "max-age" is not supported by IE，IE不支持 max-age，所以使用 expires 来设置过期时间</span></span><span class="line">attributes.expires = attributes.expires ? attributes.expires.toUTCString() : <span class="string">''</span>;</span><span class="line"></span><span class="line"><span class="keyword">try</span> &#123;</span><span class="line">          result = <span class="built_in">JSON</span>.stringify(value);</span><span class="line">          <span class="comment">// 如果是对象或者数组，转为 JSON</span></span><span class="line"><span class="keyword">if</span> (<span class="regexp">/^[\&#123;\[]/</span>.test(result)) &#123;</span><span class="line">value = result;</span><span class="line">&#125;</span><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><span class="line"></span><span class="line"><span class="keyword">if</span> (!converter.write) &#123;</span><span class="line">          <span class="comment">// 对 value 值进行了 encode 同时对其中部分 code 做了 decode 注意 replace 方法用的很高级</span></span><span class="line">value = <span class="built_in">encodeURIComponent</span>(<span class="built_in">String</span>(value))</span><span class="line">.replace(<span class="regexp">/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g</span>, <span class="built_in">decodeURIComponent</span>);</span><span class="line">&#125; <span class="keyword">else</span> &#123;</span><span class="line">value = converter.write(value, key);</span><span class="line">&#125;</span><span class="line">        <span class="comment">// 对 key 值做了处理</span></span><span class="line">key = <span class="built_in">encodeURIComponent</span>(<span class="built_in">String</span>(key));</span><span class="line">key = key.replace(<span class="regexp">/%(23|24|26|2B|5E|60|7C)/g</span>, <span class="built_in">decodeURIComponent</span>);</span><span class="line">key = key.replace(<span class="regexp">/[\(\)]/g</span>, <span class="built_in">escape</span>);</span><span class="line"></span><span class="line"><span class="keyword">var</span> stringifiedAttributes = <span class="string">''</span>;</span><span class="line">        <span class="comment">// 将传入的 attributes 连接起来 domain=.geekang.org; expries=121314212; http</span></span><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> attributeName <span class="keyword">in</span> attributes) &#123;</span><span class="line"><span class="keyword">if</span> (!attributes[attributeName]) &#123;</span><span class="line"><span class="keyword">continue</span>;</span><span class="line">&#125;</span><span class="line">stringifiedAttributes += <span class="string">'; '</span> + attributeName;</span><span class="line"><span class="keyword">if</span> (attributes[attributeName] === <span class="literal">true</span>) &#123;</span><span class="line"><span class="keyword">continue</span>;</span><span class="line">&#125;</span><span class="line">stringifiedAttributes += <span class="string">'='</span> + attributes[attributeName];</span><span class="line">        &#125;</span><span class="line">        <span class="comment">// 写入 cookie。这里说明 cookie 写入的方式 key=value; domain=.geekbang.org...</span></span><span class="line">        <span class="built_in">console</span>.log(key + <span class="string">'='</span> + value + stringifiedAttributes)</span><span class="line"><span class="keyword">return</span> (<span class="built_in">document</span>.cookie = key + <span class="string">'='</span> + value + stringifiedAttributes);</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">// Read</span></span><span class="line"></span><span class="line"><span class="keyword">if</span> (!key) &#123;</span><span class="line">result = &#123;&#125;;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">// To prevent the for loop in the first place assign an empty array</span></span><span class="line"><span class="comment">// in case there are no cookies at all. Also prevents odd result when</span></span><span class="line"><span class="comment">// calling "get()"</span></span><span class="line"><span class="keyword">var</span> cookies = <span class="built_in">document</span>.cookie ? <span class="built_in">document</span>.cookie.split(<span class="string">'; '</span>) : [];</span><span class="line"><span class="keyword">var</span> rdecode = <span class="regexp">/(%[0-9A-Z]&#123;2&#125;)+/g</span>;</span><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><span class="line"></span><span class="line"><span class="keyword">for</span> (; i &lt; cookies.length; i++) &#123;</span><span class="line"><span class="keyword">var</span> parts = cookies[i].split(<span class="string">'='</span>);</span><span class="line"><span class="keyword">var</span> cookie = parts.slice(<span class="number">1</span>).join(<span class="string">'='</span>);</span><span class="line"></span><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.json &amp;&amp; cookie.charAt(<span class="number">0</span>) === <span class="string">'"'</span>) &#123;</span><span class="line">cookie = cookie.slice(<span class="number">1</span>, <span class="number">-1</span>);</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="keyword">try</span> &#123;</span><span class="line"><span class="keyword">var</span> name = parts[<span class="number">0</span>].replace(rdecode, <span class="built_in">decodeURIComponent</span>);</span><span class="line">cookie = converter.read ?</span><span class="line">converter.read(cookie, name) : converter(cookie, name) ||</span><span class="line">cookie.replace(rdecode, <span class="built_in">decodeURIComponent</span>);</span><span class="line"></span><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.json) &#123;</span><span class="line"><span class="keyword">try</span> &#123;</span><span class="line">cookie = <span class="built_in">JSON</span>.parse(cookie);</span><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="keyword">if</span> (key === name) &#123;</span><span class="line">result = cookie;</span><span class="line"><span class="keyword">break</span>;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="keyword">if</span> (!key) &#123;</span><span class="line">result[name] = cookie;</span><span class="line">&#125;</span><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="keyword">return</span> result;</span><span class="line">&#125;</span><span class="line">api.set = api;</span><span class="line">api.get = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><span class="line"><span class="keyword">return</span> api.call(api, key);</span><span class="line">&#125;;</span><span class="line">api.getJSON = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><span class="line"><span class="keyword">return</span> api.apply(&#123;</span><span class="line">json: <span class="literal">true</span></span><span class="line">&#125;, [].slice.call(<span class="built_in">arguments</span>));</span><span class="line">&#125;;</span><span class="line">api.defaults = &#123;&#125;;</span><span class="line">    <span class="comment">// remove 直接设置了传入的 key 的 value 位 ''，并且设置过期时间为负</span></span><span class="line">api.remove = <span class="function"><span class="keyword">function</span> (<span class="params">key, attributes</span>) </span>&#123;</span><span class="line">api(key, <span class="string">''</span>, extend(attributes, &#123;</span><span class="line">expires: <span class="number">-1</span></span><span class="line">&#125;));</span><span class="line">&#125;;</span><span class="line"></span><span class="line">api.withConverter = init;</span><span class="line"></span><span class="line"><span class="keyword">return</span> api;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="keyword">return</span> init(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);</span><span class="line">&#125;));</span></pre></td></tr></table></figure><h2 id="结论如下："><a href="#结论如下：" class="headerlink" title="结论如下："></a>结论如下：</h2><ol><li>cookie 的读取方式为 <code>document.cookie</code>。获取到的是所有该域下 <code>cookie</code> key value 的字符串,不同 key value 之间以 <code>;</code> 隔开。例如 <code>text=1; name=newming; age=25</code>。注意拿不到 <code>expires</code> <code>path</code> 等信息。然后可以通过字符串分割拿到某一个信息</li><li>cookie 的写入方式为 document.cookie = ‘key=value; expires=time; path=/; ‘。设置的时候为一条一条的设置，可以带上 <code>path</code> <code>domain</code> 等信息，属性之间同样以 <code>;</code> 隔开，如果 value 是对象的活需要转为字符串</li><li>cookie 的删除 <code>docoment.cookie = &#39;key=; path=/; expires=time&#39;</code> 。注意时间为 UTCString，并且小于当前时间，即直接将某条属性设置过期即可删除</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近做了一个需要在不同二级域名的两个项目之间进行通知，尝试了 iframe 方式，发现在移动端失败，于是打算通过 cookie 来进行消息通知。所以去找了前端操作 cookie 的库，后来找到 &lt;a href=&quot;https://github.com/js-cookie/js
      
    
    </summary>
    
      <category term="前端" scheme="https://newming.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="https://newming.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>deep-compare</title>
    <link href="https://newming.github.io/2018/01/26/deep-compare/"/>
    <id>https://newming.github.io/2018/01/26/deep-compare/</id>
    <published>2018-01-26T05:44:21.000Z</published>
    <updated>2018-01-26T06:13:05.020Z</updated>
    
    <content type="html"><![CDATA[<p>今天分享的是一个可以进行深度比较传入参数的方法。在日常的开发中，比较两个数据是否相等的情况非常多，对于基本数据类型的相对简单。但是当比较两个对象的时候就比较复杂了。下面分享一个在 <a href="https://stackoverflow.com/questions/1068834/object-comparison-in-javascript" target="_blank" rel="external">stackoverflow</a> 上看到的方法，可以比较传入的多个参数是否相等。</p><p>在阅读代码时加入了自己的一些注释，同时理了一下对比两个不知道数据类型的变量时，该如何去做。具体涉及到鉴别时各种条件的优先顺序以及需要注意的点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span><span class="line">45</span><span class="line">46</span><span class="line">47</span><span class="line">48</span><span class="line">49</span><span class="line">50</span><span class="line">51</span><span class="line">52</span><span class="line">53</span><span class="line">54</span><span class="line">55</span><span class="line">56</span><span class="line">57</span><span class="line">58</span><span class="line">59</span><span class="line">60</span><span class="line">61</span><span class="line">62</span><span class="line">63</span><span class="line">64</span><span class="line">65</span><span class="line">66</span><span class="line">67</span><span class="line">68</span><span class="line">69</span><span class="line">70</span><span class="line">71</span><span class="line">72</span><span class="line">73</span><span class="line">74</span><span class="line">75</span><span class="line">76</span><span class="line">77</span><span class="line">78</span><span class="line">79</span><span class="line">80</span><span class="line">81</span><span class="line">82</span><span class="line">83</span><span class="line">84</span><span class="line">85</span><span class="line">86</span><span class="line">87</span><span class="line">88</span><span class="line">89</span><span class="line">90</span><span class="line">91</span><span class="line">92</span><span class="line">93</span><span class="line">94</span><span class="line">95</span><span class="line">96</span><span class="line">97</span><span class="line">98</span><span class="line">99</span><span class="line">100</span><span class="line">101</span><span class="line">102</span><span class="line">103</span><span class="line">104</span><span class="line">105</span><span class="line">106</span><span class="line">107</span><span class="line">108</span><span class="line">109</span><span class="line">110</span><span class="line">111</span><span class="line">112</span><span class="line">113</span><span class="line">114</span><span class="line">115</span><span class="line">116</span><span class="line">117</span><span class="line">118</span><span class="line">119</span><span class="line">120</span><span class="line">121</span><span class="line">122</span><span class="line">123</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCompare</span> (<span class="params"></span>) </span>&#123;</span><span class="line">  <span class="keyword">var</span> i, l, leftChain, rightChain;</span><span class="line"></span><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">compare2Objects</span> (<span class="params">x, y</span>) </span>&#123;</span><span class="line">    <span class="keyword">var</span> p;</span><span class="line"></span><span class="line">    <span class="comment">// remember that NaN === NaN returns false</span></span><span class="line">    <span class="comment">// and isNaN(undefined) returns true</span></span><span class="line">    <span class="comment">// 第一步如果两个是 NaN 返回 true。要注意如何识别 NaN，即上边的两条注释</span></span><span class="line">    <span class="keyword">if</span> (<span class="built_in">isNaN</span>(x) &amp;&amp; <span class="built_in">isNaN</span>(y) &amp;&amp; <span class="keyword">typeof</span> x === <span class="string">'number'</span> &amp;&amp; <span class="keyword">typeof</span> y === <span class="string">'number'</span>) &#123;</span><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><span class="line">    &#125;</span><span class="line"></span><span class="line">    <span class="comment">// Compare primitives and functions.</span></span><span class="line">    <span class="comment">// Check if both arguments link to the same object.</span></span><span class="line">    <span class="comment">// Especially useful on the step where we compare prototypes</span></span><span class="line">    <span class="comment">// 第二步直接判断是否相等</span></span><span class="line">    <span class="keyword">if</span> (x === y) &#123;</span><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><span class="line">    &#125;</span><span class="line"></span><span class="line">    <span class="comment">// Works in case when functions are created in constructor.</span></span><span class="line">    <span class="comment">// Comparing dates is a common scenario. Another built-ins?</span></span><span class="line">    <span class="comment">// We can even handle functions passed across iframes</span></span><span class="line">    <span class="comment">// 第三步，如果是函数或者是通过 new 出来的 String，它们的类型为 object ，调用他们的 toString 来检测</span></span><span class="line">    <span class="keyword">if</span> ((<span class="keyword">typeof</span> x === <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> y === <span class="string">'function'</span>) ||</span><span class="line">       (x <span class="keyword">instanceof</span> <span class="built_in">Date</span> &amp;&amp; y <span class="keyword">instanceof</span> <span class="built_in">Date</span>) ||</span><span class="line">       (x <span class="keyword">instanceof</span> <span class="built_in">RegExp</span> &amp;&amp; y <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) ||</span><span class="line">       (x <span class="keyword">instanceof</span> <span class="built_in">String</span> &amp;&amp; y <span class="keyword">instanceof</span> <span class="built_in">String</span>) ||</span><span class="line">       (x <span class="keyword">instanceof</span> <span class="built_in">Number</span> &amp;&amp; y <span class="keyword">instanceof</span> <span class="built_in">Number</span>)) &#123;</span><span class="line">        <span class="keyword">return</span> x.toString() === y.toString();</span><span class="line">    &#125;</span><span class="line">    <span class="comment">// 第四步，到这里只剩下对象（包括&#123;&#125;, []，注意不包含 null，因为 null === null 为 true）没有判断出来</span></span><span class="line">    <span class="comment">// At last checking prototypes as good as we can</span></span><span class="line">    <span class="keyword">if</span> (!(x <span class="keyword">instanceof</span> <span class="built_in">Object</span> &amp;&amp; y <span class="keyword">instanceof</span> <span class="built_in">Object</span>)) &#123;</span><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><span class="line">    &#125;</span><span class="line">    <span class="comment">/*</span></span><span class="line"><span class="comment">        var a = function fun () &#123;&#125;</span></span><span class="line"><span class="comment">        var b = new a</span></span><span class="line"><span class="comment">        a.prototype.isPrototypeOf(b) // true</span></span><span class="line"><span class="comment">    */</span></span><span class="line">    <span class="keyword">if</span> (x.isPrototypeOf(y) || y.isPrototypeOf(x)) &#123;</span><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><span class="line">    &#125;</span><span class="line"></span><span class="line">    <span class="keyword">if</span> (x.constructor !== y.constructor) &#123;</span><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><span class="line">    &#125;</span><span class="line"></span><span class="line">    <span class="keyword">if</span> (x.prototype !== y.prototype) &#123;</span><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><span class="line">    &#125;</span><span class="line"></span><span class="line">    <span class="comment">// Check for infinitive linking loops</span></span><span class="line">    <span class="keyword">if</span> (leftChain.indexOf(x) &gt; <span class="number">-1</span> || rightChain.indexOf(y) &gt; <span class="number">-1</span>) &#123;</span><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><span class="line">    &#125;</span><span class="line"></span><span class="line">    <span class="comment">// Quick checking of one object being a subset of another.</span></span><span class="line">    <span class="comment">// todo: cache the structure of arguments[0] for performance</span></span><span class="line">    <span class="comment">// 这里只是检测了两个对象(数组)拥有相同的属性，并且属性类型相同，具体属性值还没有深度对比</span></span><span class="line">    <span class="keyword">for</span> (p <span class="keyword">in</span> y) &#123;</span><span class="line">        <span class="keyword">if</span> (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) &#123;</span><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><span class="line">        &#125;</span><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> y[p] !== <span class="keyword">typeof</span> x[p]) &#123;</span><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><span class="line">        &#125;</span><span class="line">    &#125;</span><span class="line"></span><span class="line">    <span class="keyword">for</span> (p <span class="keyword">in</span> x) &#123;</span><span class="line">        <span class="comment">// 首先反过来来了一遍上面（61-68）循环对比，避免 x 中包含的某个属性 y 中没有，不可以删除</span></span><span class="line">        <span class="keyword">if</span> (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) &#123;</span><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><span class="line">        &#125;</span><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> y[p] !== <span class="keyword">typeof</span> x[p]) &#123;</span><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><span class="line">        &#125;</span><span class="line"></span><span class="line">        <span class="keyword">switch</span> (<span class="keyword">typeof</span> (x[p])) &#123;</span><span class="line">            <span class="keyword">case</span> <span class="string">'object'</span>:</span><span class="line">            <span class="keyword">case</span> <span class="string">'function'</span>:</span><span class="line"></span><span class="line">                leftChain.push(x);</span><span class="line">                rightChain.push(y);</span><span class="line">                <span class="comment">// 递归</span></span><span class="line">                <span class="keyword">if</span> (!compare2Objects (x[p], y[p])) &#123;</span><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><span class="line">                &#125;</span><span class="line"></span><span class="line">                leftChain.pop();</span><span class="line">                rightChain.pop();</span><span class="line">                <span class="keyword">break</span>;</span><span class="line"></span><span class="line">            <span class="keyword">default</span>:</span><span class="line">                <span class="keyword">if</span> (x[p] !== y[p]) &#123;</span><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><span class="line">                &#125;</span><span class="line">                <span class="keyword">break</span>;</span><span class="line">        &#125;</span><span class="line">    &#125;</span><span class="line"></span><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><span class="line">  &#125;</span><span class="line"></span><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &lt; <span class="number">1</span>) &#123;</span><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//Die silently? Don't know how to handle such case, please help...</span></span><span class="line">    <span class="comment">// throw "Need two or more arguments to compare";</span></span><span class="line">  &#125;</span><span class="line"></span><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++) &#123;</span><span class="line"></span><span class="line">      leftChain = []; <span class="comment">//Todo: this can be cached</span></span><span class="line">      rightChain = [];</span><span class="line"></span><span class="line">      <span class="keyword">if</span> (!compare2Objects(<span class="built_in">arguments</span>[<span class="number">0</span>], <span class="built_in">arguments</span>[i])) &#123;</span><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><span class="line">      &#125;</span><span class="line">  &#125;</span><span class="line"></span><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天分享的是一个可以进行深度比较传入参数的方法。在日常的开发中，比较两个数据是否相等的情况非常多，对于基本数据类型的相对简单。但是当比较两个对象的时候就比较复杂了。下面分享一个在 &lt;a href=&quot;https://stackoverflow.com/questions/10
      
    
    </summary>
    
      <category term="前端" scheme="https://newming.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="https://newming.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>mongoose 简易教程</title>
    <link href="https://newming.github.io/2018/01/02/mongoose/"/>
    <id>https://newming.github.io/2018/01/02/mongoose/</id>
    <published>2018-01-02T13:22:12.000Z</published>
    <updated>2018-01-03T01:40:29.796Z</updated>
    
    <content type="html"><![CDATA[<p><code>mongoose</code> 是 nodejs 中连接应用与 <code>mongodb</code> 数据库的一个库。在 <code>mongoose</code> 中有几个重要的概念需要重点了解。</p><ul><li>Schema: 数据库模板的描述、定义。以及数据库中的个字段的格式等定义。</li><li>Model: 数据库的模型，Schema 的具体实现。可以操作数据库。</li><li>Entity: 通过 Model 创建的具体的实例。也具有操作数据库的能力。</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><span class="line">npm install mongoose</span></pre></td></tr></table></figure><p>启动数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mongod --dbpath=path</span></pre></td></tr></table></figure><p>在 js 文件中使用编写代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span><span class="line">45</span><span class="line">46</span><span class="line">47</span><span class="line">48</span><span class="line">49</span><span class="line">50</span><span class="line">51</span><span class="line">52</span><span class="line">53</span><span class="line">54</span><span class="line">55</span><span class="line">56</span><span class="line">57</span><span class="line">58</span><span class="line">59</span><span class="line">60</span><span class="line">61</span><span class="line">62</span><span class="line">63</span><span class="line">64</span><span class="line">65</span><span class="line">66</span><span class="line">67</span><span class="line">68</span><span class="line">69</span><span class="line">70</span><span class="line">71</span><span class="line">72</span><span class="line">73</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><span class="line"></span><span class="line">mongoose.Promise = <span class="built_in">Promise</span> <span class="comment">// 让 mongoose 中的 Promise 使用 node 中全局的 Promise，也可以使用其他库，例如 bluebird，http://mongoosejs.com/docs/promises.html</span></span><span class="line"></span><span class="line">mongoose.set(<span class="string">'debug'</span>, <span class="literal">true</span>) <span class="comment">// 开启 debug</span></span><span class="line">mongoose.connect(<span class="string">'mongodb://localhost/test'</span>) <span class="comment">// 连接数据库 test 为数据库名称，默认端口为 27017，如果不是这个端口需要增加端口</span></span><span class="line"></span><span class="line">mongoose.connection.on(<span class="string">'open'</span>, () =&gt; &#123;</span><span class="line">  <span class="built_in">console</span>.log(<span class="string">'mongodb opened'</span>)</span><span class="line">&#125;)</span><span class="line"></span><span class="line"><span class="comment">// 创建 一个 User Schema，用来描述 User 集合的结构</span></span><span class="line"><span class="keyword">const</span> UserSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><span class="line">  name: <span class="built_in">String</span>,</span><span class="line">  times: &#123;</span><span class="line">    type: <span class="built_in">Number</span>,</span><span class="line">    <span class="keyword">default</span>: <span class="number">0</span></span><span class="line">  &#125;</span><span class="line">&#125;)</span><span class="line"></span><span class="line"><span class="comment">// 创建 model</span></span><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">'User'</span>, UserSchema) <span class="comment">// 基于 UserSchema 建模，这时会在数据库中自动创建 users 的集合，注意这里的大写的 User 会在数据库中转小写负数</span></span><span class="line"></span><span class="line"><span class="comment">// 创建具体的用户实例</span></span><span class="line">;<span class="function">(<span class="params"><span class="keyword">async</span> (</span>) =&gt;</span> &#123;</span><span class="line">  <span class="comment">// console.log(await User.find(&#123;&#125;).exec()) // []</span></span><span class="line">  <span class="comment">// 实例化一个具体的用户</span></span><span class="line">  <span class="keyword">const</span> user = <span class="keyword">new</span> User(&#123;</span><span class="line">    name: <span class="string">'newming'</span></span><span class="line">  &#125;)</span><span class="line">  <span class="comment">// 保存到数据库中</span></span><span class="line">  <span class="keyword">await</span> user.save()</span><span class="line">  <span class="comment">// console.log(await User.find(&#123;&#125;).exec()) // [&#123;name: 'nemwing', times: 0&#125;] json 格式的一条数据</span></span><span class="line"></span><span class="line">  <span class="comment">// 查找一条数据，并更新</span></span><span class="line">  <span class="keyword">const</span> user = <span class="keyword">await</span> User.findOne(&#123;<span class="attr">name</span>: <span class="string">'newming'</span>&#125;)</span><span class="line">  user.name = <span class="string">'newminghaha'</span></span><span class="line">  <span class="keyword">await</span> user.save()</span><span class="line">  <span class="comment">// console.log(await User.find(&#123;&#125;).exec()) // [&#123;name: 'nemwinghaha', times: 0&#125;]</span></span><span class="line"></span><span class="line">  <span class="comment">// 调用 Schema 静态方法</span></span><span class="line">  <span class="built_in">console</span>.log(User.getUser(<span class="string">'newminghaha'</span>).exec())</span><span class="line"></span><span class="line">  <span class="comment">// 调用实例 method</span></span><span class="line">  <span class="keyword">const</span> user = <span class="keyword">await</span> User.findOne(&#123;<span class="attr">name</span>: <span class="string">'newminghaha'</span>&#125;)</span><span class="line">  <span class="keyword">const</span> newUser = user.fetchUser(<span class="string">'newminghaha'</span>)</span><span class="line">  <span class="built_in">console</span>.log(newUser)</span><span class="line">&#125;)()</span><span class="line"></span><span class="line"><span class="comment">// 定义 Schema 前置钩子方法 http://mongoosejs.com/docs/api.html#schema_Schema-pre</span></span><span class="line">UserSchema.pre(<span class="string">'save'</span>, next =&gt; &#123;</span><span class="line">  <span class="keyword">this</span>.times ++</span><span class="line">  next() <span class="comment">// 每次保存前执行</span></span><span class="line">&#125;)</span><span class="line"></span><span class="line"><span class="comment">// 定义 Schema 静态方法 http://mongoosejs.com/docs/api.html#schema_Schema-static</span></span><span class="line">UserSchema.statics = &#123;</span><span class="line">  <span class="keyword">async</span> getUser(name) &#123;</span><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="keyword">this</span>.findOne(&#123;</span><span class="line">      name</span><span class="line">    &#125;)</span><span class="line">    <span class="keyword">return</span> user</span><span class="line">  &#125;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">// 定义 Schema 实例方法</span></span><span class="line">UserSchema.methods = &#123;</span><span class="line">  <span class="keyword">async</span> fetchUser(name) &#123;</span><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="keyword">this</span>.model(<span class="string">'User'</span>).findOne(&#123;</span><span class="line">      name: name</span><span class="line">    &#125;).exec()</span><span class="line">  &#125;</span><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;mongoose&lt;/code&gt; 是 nodejs 中连接应用与 &lt;code&gt;mongodb&lt;/code&gt; 数据库的一个库。在 &lt;code&gt;mongoose&lt;/code&gt; 中有几个重要的概念需要重点了解。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Schema: 数据库模板的描述
      
    
    </summary>
    
      <category term="数据库" scheme="https://newming.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mongodb" scheme="https://newming.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>mongodb 数据库</title>
    <link href="https://newming.github.io/2018/01/02/mongodb/"/>
    <id>https://newming.github.io/2018/01/02/mongodb/</id>
    <published>2018-01-02T03:33:34.000Z</published>
    <updated>2018-03-05T06:01:52.059Z</updated>
    
    <content type="html"><![CDATA[<p>在搞 node 后台开发过程中，肯定涉及到数据库的使用，其中个人使用最多就是 <code>mongodb</code> 数据库了。本文主要介绍 <code>mongodb</code> 的一些基本概念及使用。</p><h2 id="1-什么是MongoDB"><a href="#1-什么是MongoDB" class="headerlink" title="1. 什么是MongoDB"></a>1. 什么是MongoDB</h2><ul><li>MongoDB是一个基于分布式文件存储的开源数据库系统</li><li>MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</li></ul><h2 id="2-MongoDB安装"><a href="#2-MongoDB安装" class="headerlink" title="2. MongoDB安装"></a>2. MongoDB安装</h2><h3 id="2-1-windows安装"><a href="#2-1-windows安装" class="headerlink" title="2.1 windows安装"></a>2.1 windows安装</h3><p><a href="https://docs.mongodb.org/v3.0/tutorial" target="_blank" rel="external">Windows官方安装指南</a></p><h3 id="2-2-mac安装"><a href="#2-2-mac安装" class="headerlink" title="2.2 mac安装"></a>2.2 mac安装</h3><p><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/" target="_blank" rel="external">Mac官方安装指南</a></p><ol><li>先安装homebrew</li></ol><p><a href="http://brew.sh/" target="_blank" rel="external">brew</a></p><ol><li>使用brew安装mongodb</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">brew install mongodb</span></pre></td></tr></table></figure><ol><li>再安装可视化工具</li></ol><p><a href="https://robomongo.org/" target="_blank" rel="external">Robomongo</a></p><h2 id="3-mongodb启动与连接"><a href="#3-mongodb启动与连接" class="headerlink" title="3. mongodb启动与连接"></a>3. mongodb启动与连接</h2><h3 id="3-1-windows启动服务器端"><a href="#3-1-windows启动服务器端" class="headerlink" title="3.1 windows启动服务器端"></a>3.1 windows启动服务器端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mongod --dbpath=./data</span></pre></td></tr></table></figure><ul><li>如果出现<code>waiting for connections on port 27017</code>就表示<strong>启动成功</strong>,已经在27017端口上监听了客户端的请求</li><li>注意：<code>--dbpath</code>后的值表示数据库文件的存储路径,而且后面的路径必须事先创建好，必须已经<strong>存在</strong>，否则服务开启失败</li><li>注意：这个命令窗体绝对<strong>不能关</strong>,关闭这个窗口就相当于停止了<code>mongodb</code>服务</li><li>也可以在命令后面加上参数 <code>--port 27017</code> 来指定端口</li></ul><h3 id="3-2-启动客户端连接服务器"><a href="#3-2-启动客户端连接服务器" class="headerlink" title="3.2 启动客户端连接服务器"></a>3.2 启动客户端连接服务器</h3><p>命令窗体中输入 mongo –host=127.0.0.1 或者 mongo 按回车键</p><blockquote><p>备注：–host后的值表示服务器的ip地址</p></blockquote><h2 id="4-MongoDB基本概念"><a href="#4-MongoDB基本概念" class="headerlink" title="4. MongoDB基本概念"></a>4. MongoDB基本概念</h2><ul><li><strong>数据库</strong> MongoDB的单个实例可以容纳<strong>多个</strong>独立的数据库，比如一个学生管理系统就可以对应一个数据库实例</li><li><strong>集合</strong> 数据库是由集合组成的,一个集合用来表示一个<strong>实体</strong>,如学生集合</li><li><strong>文档</strong> 集合是由文档组成的，一个文档表示一条<strong>记录</strong>,比如一位同学张三就是一个文档</li></ul><p><img src="http://7xjf2l.com1.z0.glb.clouddn.com/mongodbstructure.jpg"><br><img src="http://7xjf2l.com1.z0.glb.clouddn.com/mongovue.png"></p><h2 id="5-数据库操作"><a href="#5-数据库操作" class="headerlink" title="5. 数据库操作"></a>5. 数据库操作</h2><h3 id="5-1-使用数据库"><a href="#5-1-使用数据库" class="headerlink" title="5.1 使用数据库"></a>5.1 使用数据库</h3><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">use database_name      database_name代表数据库的名字</span></pre></td></tr></table></figure><p>注：如果此数据库存在，则切换到此数据库下,如果此数据库还不存在也可以切过来</p><p><strong>实例</strong></p><p>切换到 <code>person</code>数据库下</p><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/3.mongodb-8.png"></p><h3 id="5-2-查看所有数据库"><a href="#5-2-查看所有数据库" class="headerlink" title="5.2 查看所有数据库"></a>5.2 查看所有数据库</h3><p><strong>语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">show dbs</span></pre></td></tr></table></figure><blockquote><p>备注: 我们刚创建的数据库person 如果不在列表内， 要显示它，我们需要向 person 数据库插入一些数据 db.person.insert({name:”zhangSan”,age:30})</p></blockquote><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/3.mongodb-7.png"></p><h3 id="5-3-查看当前使用的数据库"><a href="#5-3-查看当前使用的数据库" class="headerlink" title="5.3 查看当前使用的数据库"></a>5.3 查看当前使用的数据库</h3><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db 或 db.getName()</span></pre></td></tr></table></figure><blockquote><p>注：db代表的是当前数据库 也就是person这个数据库</p></blockquote><p><strong>实例</strong></p><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/3.mongodb-9.png"></p><h3 id="5-4-删除数据库"><a href="#5-4-删除数据库" class="headerlink" title="5.4 删除数据库"></a>5.4 删除数据库</h3><p><strong>语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.dropDatabase()</span></pre></td></tr></table></figure><p><strong>实例</strong></p><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/mongodb-shanChuShuJuKu-1.png"></p><h2 id="6-集合操作"><a href="#6-集合操作" class="headerlink" title="6. 集合操作"></a>6. 集合操作</h2><h3 id="6-1-查看帮助"><a href="#6-1-查看帮助" class="headerlink" title="6.1 查看帮助"></a>6.1 查看帮助</h3><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.worker.help()</span></pre></td></tr></table></figure><p><strong>实例</strong></p><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/3.mongodb-13.png"></p><h3 id="6-2-查看数据库下的集合"><a href="#6-2-查看数据库下的集合" class="headerlink" title="6.2 查看数据库下的集合"></a>6.2 查看数据库下的集合</h3><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">show collections</span></pre></td></tr></table></figure><p><strong>实例</strong></p><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/3.mongodb-11.png"></p><h3 id="6-3-创建集合"><a href="#6-3-创建集合" class="headerlink" title="6.3 创建集合"></a>6.3 创建集合</h3><p><strong>创建一个空集合</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.createCollection(collection_Name)      collection_Name集合的名称</span></pre></td></tr></table></figure><p><strong>创建集合并插入一个文档</strong></p><ul><li>collection_Name集合的名称</li><li>document要插入的文档</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.collection_Name.insert(document)</span></pre></td></tr></table></figure><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/3.mongodb-14.png"></p><h2 id="7-插入文档"><a href="#7-插入文档" class="headerlink" title="7. 插入文档"></a>7. 插入文档</h2><h3 id="7-1-insert"><a href="#7-1-insert" class="headerlink" title="7.1 insert"></a>7.1 insert</h3><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span></pre></td><td class="code"><pre><span class="line">db.collection_name.insert(document)</span><span class="line">`</span></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li>collection_name 集合的名字</li><li>document 插入的文档</li></ul><p><strong>实例</strong></p><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/3.mongodb-15.png"></p><blockquote><p>每当插入一条新文档的时候mongodb会自动为此文档生成一个<code>_id</code>属性,_id一定是唯一的，用来唯一标识一个文档<br> _id也可以直接指定，但如果数据库中此集合下已经有此_id的话插入会失败</p></blockquote><h3 id="7-2-save"><a href="#7-2-save" class="headerlink" title="7.2 save"></a>7.2 save</h3><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.collection_name.save(document)</span></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li>collection_name 集合的名字</li><li>document 插入的文档</li></ul><blockquote><p>注：如果不指定 _id 字段 save() 方法类似于 insert() 方法。如果指定 _id 字段，则会更新该 _id 的数据。</p></blockquote><p><strong>实例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.person.save(&#123;name:&quot;xiaoHong&quot;,age:50&#125;)</span></pre></td></tr></table></figure><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/mongodb-baoCun-1.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.person.save(&#123;_id:ObjectId(&quot;562c9caf671c978b6596e825&quot;),name:&quot;xiaoHong&quot;,age:10&#125;)</span></pre></td></tr></table></figure><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/mongodb-baoCun-2.png"></p><h2 id="8-更新文档"><a href="#8-更新文档" class="headerlink" title="8. 更新文档"></a>8. 更新文档</h2><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span></pre></td><td class="code"><pre><span class="line">db.collection.update(</span><span class="line">   &lt;query&gt;,</span><span class="line">   &lt;updateObj&gt;,</span><span class="line">   &#123;</span><span class="line">     upsert: &lt;boolean&gt;,</span><span class="line">     multi: &lt;boolean&gt;</span><span class="line">   &#125;</span><span class="line">)</span></pre></td></tr></table></figure><p><strong>参数说明</strong></p><ul><li>query  查询条件,指定要更新符合哪些条件的文档</li><li>update  更新后的对象或指定一些更新的操作符<ul><li>$set直接指定更新后的值</li><li>$inc在原基础上累加</li></ul></li><li>upsert  可选，这个参数的意思是，如果不存在符合条件的记录时是否插入updateObj.  默认是false,不插入。</li><li>multi  可选，mongodb 默认只更新找到的第一条记录，如果这个参数为true,就更新所有符合条件的记录。</li></ul><p><strong>实例</strong></p><p>将document数据中name是liSi 的数据的name修改为liSi_update</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.worker.update(&#123;name:&apos;liSi&apos;&#125;,&#123;$set:&#123;name:&apos;liSi_update&apos;&#125;&#125;)</span></pre></td></tr></table></figure><blockquote><p>注：如果有多条name是liSi的数据只更新一条,如果想全部更新需要指定{multi:true}的参数</p></blockquote><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/3.mongodb-18.png"></p><h2 id="9-文档的删除"><a href="#9-文档的删除" class="headerlink" title="9. 文档的删除"></a>9. 文档的删除</h2><p>remove方法是用来移除集合中的数据</p><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span></pre></td><td class="code"><pre><span class="line">db.collection.remove(</span><span class="line">   &lt;query&gt;,</span><span class="line">   &#123;</span><span class="line">     justOne: &lt;boolean&gt;</span><span class="line">   &#125;</span><span class="line">)</span></pre></td></tr></table></figure><p><strong>参数说明</strong></p><ul><li>query :（可选）删除的文档的条件。</li><li>justOne : （可选）如果设为 true 或 1，则只删除匹配到的多个文档中的第一个</li></ul><p><strong>实例</strong></p><p>删除worker集合里name是fJianZhou的所有Document数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.worker.remove(&#123;name:&apos;fJianZhou&apos;&#125;)</span></pre></td></tr></table></figure><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/3.mongodb-19.png"></p><p>删除person集合里name是xiaoHong的第一条数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.person.remove(&#123;name:&quot;xiaoHong&quot;&#125;,1)</span></pre></td></tr></table></figure><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/mongodb-shanChuShuJu-1.png"></p><h2 id="10-查询文档"><a href="#10-查询文档" class="headerlink" title="10. 查询文档"></a>10. 查询文档</h2><h3 id="10-1-find"><a href="#10-1-find" class="headerlink" title="10.1 find"></a>10.1 find</h3><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.collection_name.find()</span></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li>collection_name 集合的名字</li></ul><p><strong>实例</strong></p><p>查询worker下所有的文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.worker.find()</span></pre></td></tr></table></figure><h3 id="10-2-查询指定列"><a href="#10-2-查询指定列" class="headerlink" title="10.2 查询指定列"></a>10.2 查询指定列</h3><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.collection_name.find(&#123;queryWhere&#125;,&#123;key:1,key:1&#125;)</span></pre></td></tr></table></figure><p><strong>参数列表</strong></p><ul><li>collection_name  集合的名字</li><li>queryWhere 参阅查询条件操作符</li><li>key 指定要返回的列</li><li>1 表示要显示</li></ul><p><strong>实例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.worker.find(&#123;&#125;,&#123;age:1&#125;) 查询指定列</span></pre></td></tr></table></figure><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/mongodb-FindWhere-1.png"></p><h3 id="10-3-findOne"><a href="#10-3-findOne" class="headerlink" title="10.3 findOne"></a>10.3 findOne</h3><p>查询匹配结果的第一条数据</p><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.collection_name.findOne()</span></pre></td></tr></table></figure><p><strong>实例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.worker.findOne()</span></pre></td></tr></table></figure><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/mongodb-baoCun-3.png"></p><h2 id="11-条件操作符"><a href="#11-条件操作符" class="headerlink" title="11. 条件操作符"></a>11. 条件操作符</h2><p>条件操作符用于比较两个表达式并从mongoDB集合中获取数据</p><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/mongodb-where-1.png"></p><h3 id="11-1-大于操作符"><a href="#11-1-大于操作符" class="headerlink" title="11.1 大于操作符"></a>11.1 大于操作符</h3><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.collectoin_name.find(&#123;&lt;key&gt;:&#123;$gt:&lt;value&gt;&#125;&#125;)</span></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li>collectoin_name  集合名称</li><li>key   字段</li><li>value   值</li></ul><p><strong>实例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.worker.find(&#123;age:&#123;$gt:30&#125;&#125;) 查询age 大于 30的数据</span></pre></td></tr></table></figure><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/3.mongodb-16-2.png"></p><h3 id="11-2-大于等于操作符"><a href="#11-2-大于等于操作符" class="headerlink" title="11.2 大于等于操作符"></a>11.2 大于等于操作符</h3><p><strong>语法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.collectoin_name.find(&#123;&lt;key&gt;:&#123;$gte:&lt;value&gt;&#125;&#125;)</span></pre></td></tr></table></figure></p><p><strong>参数</strong></p><ul><li>collectoin_name 集合名称</li><li>key  字段</li><li>value  值</li></ul><p><strong>实例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.worker.find(&#123;age: &#123;$gte: 30&#125;&#125;) 查询age 3大于等于30 的数据</span></pre></td></tr></table></figure></p><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/3.mongodb-16-4.png"></p><h3 id="11-3-小于操作符"><a href="#11-3-小于操作符" class="headerlink" title="11.3 小于操作符"></a>11.3 小于操作符</h3><p><strong>语法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.collectoin_name.find( &#123;&lt;key&gt;:&#123;$lt:&lt;value&gt;&#125;&#125;)</span></pre></td></tr></table></figure></p><p><strong>参数</strong></p><ul><li>collectoin_name集合名称</li><li>key 字段</li><li>value 值</li></ul><p><strong>实例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.worker.find(&#123;age: &#123;$lt: 30&#125;&#125;) 查询age 小于30的数据</span></pre></td></tr></table></figure></p><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/3.mongodb-16-3.png"></p><h3 id="11-4-小于等于操作符"><a href="#11-4-小于等于操作符" class="headerlink" title="11.4 小于等于操作符"></a>11.4 小于等于操作符</h3><p><strong>语法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.collectoin_name.find(&#123;&lt;key&gt;:&#123;$lte:&lt;value&gt;&#125;&#125;)</span></pre></td></tr></table></figure></p><p><strong>参数</strong></p><ul><li>collectoin_name集合名词</li><li>key字段</li><li>value值</li></ul><p><strong>实例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.worker.find(&#123;age: &#123;$lte: 30&#125;&#125;) 查询age 小于等于30的数据</span></pre></td></tr></table></figure></p><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/3.mongodb-16-5.png"></p><h3 id="11-5-同时使用-gte和-lte"><a href="#11-5-同时使用-gte和-lte" class="headerlink" title="11.5 同时使用 $gte和$lte"></a>11.5 同时使用 $gte和$lte</h3><p><strong>语法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.collectoin_name.find(&#123;&lt;key&gt;:&#123;$gte:&lt;value&gt;&#125;,&lt;key&gt;:&#123;$lte:&lt;value&gt;&#125;&#125;)</span></pre></td></tr></table></figure></p><p><strong>参数</strong></p><ul><li>collectoin_name 集合名称</li><li>key 字段</li><li>value 值</li></ul><p><strong>实例</strong><br>查询age 大于等于 30 并且 age 小于等于 50  的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.worker.find(&#123;age: &#123;$gte: 30, $lte: 50&#125;&#125;)</span></pre></td></tr></table></figure></p><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/3.mongodb-16-6.png"></p><h3 id="11-6-等于"><a href="#11-6-等于" class="headerlink" title="11.6 等于"></a>11.6 等于</h3><p><strong>语法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.collectoin_name.find(&#123;&lt;key&gt;:&lt;value&gt;,&lt;key&gt;:&lt;value&gt;&#125;)</span></pre></td></tr></table></figure></p><p><strong>参数</strong></p><ul><li>collectoin_name集合名词</li><li>key字段</li><li>value值</li></ul><p><strong>实例</strong><br>查询age = 30的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.worker.find(&#123;&quot;age&quot;: 30&#125;)`</span></pre></td></tr></table></figure></p><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/3.mongodb-16-1.png"></p><h3 id="11-7-使用-id进行查询"><a href="#11-7-使用-id进行查询" class="headerlink" title="11.7 使用 _id进行查询"></a>11.7 使用 _id进行查询</h3><p><strong>语法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.collectoin_name.find(&#123;&quot;_id&quot; : ObjectId(&quot;value&quot;)&#125;)</span></pre></td></tr></table></figure></p><p><strong>参数</strong></p><ul><li>value  <code>_id</code>的值</li></ul><p><strong>实例</strong><br>查询_id是 562af23062d5a57609133974 数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.worker.find(&#123;&quot;_id&quot; : ObjectId(&quot;562af23062d5a57609133974&quot;)&#125;)</span></pre></td></tr></table></figure></p><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/3.mongodb-16-9.png"></p><h3 id="11-8-查询结果集的条数"><a href="#11-8-查询结果集的条数" class="headerlink" title="11.8 查询结果集的条数"></a>11.8 查询结果集的条数</h3><p><strong>语法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.collectoin_name.find().count()</span></pre></td></tr></table></figure></p><p><strong>参数</strong></p><ul><li>collectoin_name 集合名称</li></ul><p><strong>实例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.worker.find().count()</span></pre></td></tr></table></figure></p><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/3.mongodb-16-17.png"></p><h3 id="11-9-正则匹配"><a href="#11-9-正则匹配" class="headerlink" title="11.9 正则匹配"></a>11.9 正则匹配</h3><p><strong>语法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.collection.find(&#123;key:/value/&#125;)</span></pre></td></tr></table></figure></p><p><strong>参数</strong></p><ul><li>collectoin_name 集合名称</li><li>key 字段</li><li>value 值</li></ul><p><strong>实例</strong><br>查询name里包含zhang的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.worker.find(&#123;name:/value/&#125;)</span></pre></td></tr></table></figure></p><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/3.mongodb-16-10.png"></p><p>查询某个字段的值当中是否以另一个值开头<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.worker.find(&#123;name:/^zhang/&#125;)</span></pre></td></tr></table></figure></p><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/3.mongodb-16-11.png"></p><h2 id="12-与和或"><a href="#12-与和或" class="headerlink" title="12. 与和或"></a>12. 与和或</h2><h3 id="12-1-and"><a href="#12-1-and" class="headerlink" title="12.1 and"></a>12.1 and</h3><p>find方法可以传入多个键(key)，每个键(key)以逗号隔开</p><p><strong>语法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.collection_name.find(&#123;key1:value1, key2:value2&#125;)</span></pre></td></tr></table></figure></p><p><strong>实例</strong><br>查询name是zhangRenYang并且age是30的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.worker.find(&#123;name:&apos;zhangRenYang&apos;,age:30&#125;)</span></pre></td></tr></table></figure></p><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/mongodb-andfind-1.png"></p><h3 id="12-2-or"><a href="#12-2-or" class="headerlink" title="12.2 or"></a>12.2 or</h3><p><strong>语法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span></pre></td><td class="code"><pre><span class="line">db.collection_name.find(</span><span class="line">   &#123;</span><span class="line">      $or: [</span><span class="line">         &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><span class="line">      ]</span><span class="line">   &#125;</span><span class="line">)</span></pre></td></tr></table></figure></p><p><strong>实例</strong><br>查询age = 30 或者 age = 50  的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.worker.find(&#123;$or:[&#123;age = 30&#125;,&#123;age = 50&#125;]&#125;)</span></pre></td></tr></table></figure></p><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/3.mongodb-16-8.png"></p><h3 id="12-3-and和or联用"><a href="#12-3-and和or联用" class="headerlink" title="12.3 and和or联用"></a>12.3 and和or联用</h3><p><strong>语法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span></pre></td><td class="code"><pre><span class="line">db.collection_name.find(</span><span class="line">   &#123;</span><span class="line">     key1:value1,</span><span class="line">     key2:value2,</span><span class="line">     $or: [</span><span class="line">         &#123;key1: value1&#125;,</span><span class="line">         &#123;key2:value2&#125;</span><span class="line">     ]</span><span class="line">   &#125;</span><span class="line">)</span></pre></td></tr></table></figure></p><p><strong>实例</strong><br>查询 name是zhangRenYang 并且 age是30 或者 age是 50 的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.worker.find(&#123;name:&apos;zhangRenYang&apos;,$or:[&#123;age:30&#125;,&#123;age:50&#125;]&#125;)</span></pre></td></tr></table></figure></p><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/mongodb-andOr-1.png"></p><h2 id="13-分页查询"><a href="#13-分页查询" class="headerlink" title="13. 分页查询"></a>13. 分页查询</h2><h3 id="13-1-limit"><a href="#13-1-limit" class="headerlink" title="13.1 limit"></a>13.1 limit</h3><p>读取指定数量的数据记录<br><strong>语法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.collectoin_name.find().limit(number)</span></pre></td></tr></table></figure></p><p><strong> 参数</strong></p><ul><li>collectoin_name集合</li><li>number读取的条数</li></ul><p><strong>实例</strong><br>查询前3条数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.worker.find().limit(3)</span></pre></td></tr></table></figure></p><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/3.mongodb-16-14.png"></p><h3 id="13-2-skip"><a href="#13-2-skip" class="headerlink" title="13.2 skip"></a>13.2 skip</h3><p>跳过指定数量的数据，skip方法同样接受一个数字参数作为跳过的记录条数<br><strong>语法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.collectoin_name.find().skip(number)</span></pre></td></tr></table></figure></p><p><strong>参数</strong></p><ul><li>collectoin_name集合</li><li>number跳过的条数</li></ul><p><strong>实例</strong><br>查询3条以后的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.worker.find().skip(3)</span></pre></td></tr></table></figure></p><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/3.mongodb-16-15.png"></p><h3 id="13-3-skip-limit"><a href="#13-3-skip-limit" class="headerlink" title="13.3 skip+limit"></a>13.3 skip+limit</h3><p>通常用这种方式来实现分页功能<br><strong>语法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.collectoin_name.find().skip(skipNum).limit(limitNum)</span></pre></td></tr></table></figure></p><p><strong>参数</strong></p><ul><li>collectoin_name 集合名称</li><li>skipNum 跳过的条数</li><li>limitNum 限制返回的条数</li></ul><p><strong>实例</strong><br>查询在4-6之间的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.worker.find().sort(&#123;age:-1&#125;)</span></pre></td></tr></table></figure></p><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/3.mongodb-16-16.png"></p><h3 id="13-4-sort排序"><a href="#13-4-sort排序" class="headerlink" title="13.4 sort排序"></a>13.4 sort排序</h3><p>sort()方法可以通过参数指定排序的字段，并使用 1 和 -1 来指定排序的方式，其中 1 为升序排列，而-1是用于降序排列。<br><strong>语法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span></pre></td><td class="code"><pre><span class="line">db.collectoin_name.find().sort(&#123;key:1&#125;)</span><span class="line">db.collectoin_name.find().sort(&#123;key:-1&#125;)</span></pre></td></tr></table></figure></p><p><strong>参数</strong></p><ul><li>collectoin_name集合</li><li>key表示字段</li></ul><p><strong>实例</strong><br>查询出并升序排序 {age:1}  age表示按那个字段排序 1表示升序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.worker.find().sort(&#123;age:1&#125;)</span></pre></td></tr></table></figure></p><p><img src="http://7xjf2l.com2.z0.glb.qiniucdn.com/3.mongodb-16-12.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在搞 node 后台开发过程中，肯定涉及到数据库的使用，其中个人使用最多就是 &lt;code&gt;mongodb&lt;/code&gt; 数据库了。本文主要介绍 &lt;code&gt;mongodb&lt;/code&gt; 的一些基本概念及使用。&lt;/p&gt;
&lt;h2 id=&quot;1-什么是MongoDB&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="数据库" scheme="https://newming.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mongodb" scheme="https://newming.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>tail 命令</title>
    <link href="https://newming.github.io/2017/12/27/tail/"/>
    <id>https://newming.github.io/2017/12/27/tail/</id>
    <published>2017-12-27T03:05:01.000Z</published>
    <updated>2018-03-05T06:58:32.858Z</updated>
    
    <content type="html"><![CDATA[<p>用途:从指定点开始将文件写到标准输出。使用tail命令的-f选项可以方便的查阅正在改变的日志文件，tail -f filename会把filename里最尾部的内容显示在屏幕上，并且不但刷新，使你看到最新的文件内容。</p><blockquote><p>tail 命令从指定点开始将 File 参数指定的文件写到标准输出。如果没有指定文件，则会使用标准输入。 Number 变量指定将多少单元写入标准输出。 Number 变量的值可以是正的或负的整数。如果值的前面有 +（加号），从文件开头指定的单元数开始将文件写到标准输出。如果值的前面有 -（减号），则从文件末尾指定的单元数开始将文件写到标准输出。如果值前面没有 +（加号）或 -（减号），那么从文件末尾指定的单元号开始读取文件。</p></blockquote><p>Number 变量用于确定计数的起点的单元类型由 -b、-c、-k、-m 以及 -n 标志确定。如果没有指定其中的任何一个标志，那么 tail 命令就会读取指定文件的最后十行，并将其写到标准输出。这与在命令行输入 -n 10 是相同的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span></pre></td><td class="code"><pre><span class="line">tail -h</span><span class="line"><span class="comment"># tail [-F | -f | -r] [-q] [-b # | -c # | -n #] [file ...]</span></span></pre></td></tr></table></figure><h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><ul><li>-f: 循环读取</li><li>-q: 不现实处理信息</li><li>-v: 显示详细的处理信息</li><li>-c [number]: 显示的字节数</li><li>-n [number]: 显示的行数</li><li>-b [Number]: 从 Number 变量表示的 512 字节块位置开始读取指定文件</li><li>-r: 从文件末尾以逆序方式显示输出。-r 标志的缺省值是以逆序方式打印整个文件。如果文件大于 20,480 字节，那么 -r 标志只显示最后的 20,480 字节。-r 标志只有与 -n 标志一起时才有效。否则，就会将其忽略。而且 -r 在 -n 前</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示 notes 文件的最后十行</span></span><span class="line">tail notes</span><span class="line"></span><span class="line"><span class="comment"># 要从第 200 字节开始，每次显示一页 notes 文件</span></span><span class="line">tail -c +200 notes | pg</span><span class="line"></span><span class="line"><span class="comment"># 跟踪文件变化，显示的是accounts最后十行，并持续监听</span></span><span class="line">tail -f accounts</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用途:从指定点开始将文件写到标准输出。使用tail命令的-f选项可以方便的查阅正在改变的日志文件，tail -f filename会把filename里最尾部的内容显示在屏幕上，并且不但刷新，使你看到最新的文件内容。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tail 命令从
      
    
    </summary>
    
      <category term="shell" scheme="https://newming.github.io/categories/shell/"/>
    
    
      <category term="shell" scheme="https://newming.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>dom 知识汇总</title>
    <link href="https://newming.github.io/2017/12/26/dom-model/"/>
    <id>https://newming.github.io/2017/12/26/dom-model/</id>
    <published>2017-12-26T11:55:59.000Z</published>
    <updated>2018-03-05T05:53:07.982Z</updated>
    
    <content type="html"><![CDATA[<p>DOM: Document object model 文档对象模型，描述整个html页面中节点关系的谱图。熟练操作 DOM 在我们的日常开发中非常重要。</p><h2 id="js-DOM元素获取的方法-8种"><a href="#js-DOM元素获取的方法-8种" class="headerlink" title="js DOM元素获取的方法(8种)"></a>js DOM元素获取的方法(8种)</h2><h3 id="document-getElementById-‘id’"><a href="#document-getElementById-‘id’" class="headerlink" title="document.getElementById(‘id’)"></a>document.getElementById(‘id’)</h3><p>通过id获取元素，如果id重复了，获取到的是第一个，区分大小写（在 IE 6,7中不区分）</p><p>在 IE 6,7 中会把元素的 name 当作 id 来使用</p><p>如果没有获取到则返回 null,可以用id直接代表这个对象，而不去提前获取。上下文只能是 document<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// html</span></span><span class="line">&lt;p id=<span class="string">'test'</span>&gt;js中可以直接通过id拿到我&lt;<span class="regexp">/p&gt;</span></span><span class="line"><span class="regexp">/</span><span class="regexp">/ js</span></span><span class="line"><span class="regexp">console.log(test);</span></span></pre></td></tr></table></figure></p><h3 id="context-getElementsByTagName-‘li’"><a href="#context-getElementsByTagName-‘li’" class="headerlink" title="context.getElementsByTagName(‘li’)"></a>context.getElementsByTagName(‘li’)</h3><p>通过元素的标签名获取一组元素，有几个获取几个。可以根据上下文(context)获取我们获取元素的范围。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span><span class="line">oDIv.getElementsByTagName(<span class="string">'li'</span>);</span></pre></td></tr></table></figure><h3 id="document-getElementsByName-‘text’"><a href="#document-getElementsByName-‘text’" class="headerlink" title="document.getElementsByName(‘text’)"></a>document.getElementsByName(‘text’)</h3><p>通过元素的name属性获取一组元素</p><p>注意在 IE浏览器下只对表单元素起作用。这个方法常用于获取具有相同name的表单元素</p><h3 id="context-getElementsByClassName-‘class’"><a href="#context-getElementsByClassName-‘class’" class="headerlink" title="context.getElementsByClassName(‘class’)"></a>context.getElementsByClassName(‘class’)</h3><p>在 IE 6~8 会报错</p><h3 id="document-documentElement-document-body"><a href="#document-documentElement-document-body" class="headerlink" title="document.documentElement,document.body"></a>document.documentElement,document.body</h3><p>分别获取 html,body 元素，通常用来获取文档属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> winW = <span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">document</span>.body.clientWidth <span class="comment">// 兼容所有的浏览器获取当前浏览器宽度</span></span></pre></td></tr></table></figure><h3 id="document-querySelector-document-querySelectorAll"><a href="#document-querySelector-document-querySelectorAll" class="headerlink" title="document.querySelector,document.querySelectorAll"></a>document.querySelector,document.querySelectorAll</h3><p>在移动端常用的方法，IE6～8不支持。同时不存在映射关系</p><p>前者只获取一个元素，后者获取全部</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#id'</span>)</span><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.class'</span>)</span><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'li'</span>)</span><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'#id li'</span>) <span class="comment">// 后代选择器</span></span><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">"input[type='text']"</span>) <span class="comment">// 属性选择器</span></span></pre></td></tr></table></figure><h2 id="DOM-中的节点和关系属性"><a href="#DOM-中的节点和关系属性" class="headerlink" title="DOM 中的节点和关系属性"></a>DOM 中的节点和关系属性</h2><p><a href="http://www.w3school.com.cn/jsref/dom_obj_all.asp" target="_blank" rel="external">w3chool的文档</a></p><h3 id="获取关系的属性"><a href="#获取关系的属性" class="headerlink" title="获取关系的属性"></a>获取关系的属性</h3><p>节点：node 一个html页面中的元素标签、文本、注释。。。都是节点。在标准浏览器下，空格和Enter（回车）都是文本节点<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span></pre></td><td class="code"><pre><span class="line">oBox.childNodes <span class="comment">// 获取所有的子节点</span></span><span class="line">oBox.children <span class="comment">// 获取所有的元素子节点</span></span><span class="line">oBox.parentNode <span class="comment">// 获取元素的父亲节点</span></span><span class="line">oBox.previousSibling <span class="comment">// 获取元素位于相同节点树层级的前一个元素，注意空格回车文本节点也会获取。(哥哥)</span></span><span class="line">oBox.nextSibling <span class="comment">// 获取元素位于相同节点树层级的后一个元素。(弟弟)</span></span><span class="line">oBox.firstChild <span class="comment">// 获取第一个子元素</span></span><span class="line">oBox.lastChild <span class="comment">// 获取元素的最后一个</span></span></pre></td></tr></table></figure></p><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><p>主要的节点类型及其属性。</p><table><thead><tr><th style="text-align:left">节点类型</th><th style="text-align:left">nodeType</th><th>nodeName</th><th>nodeValue</th></tr></thead><tbody><tr><td style="text-align:left">元素节点（元素标签）</td><td style="text-align:left">1</td><td>大写的标签名</td><td>null</td></tr><tr><td style="text-align:left">文本节点（文字）</td><td style="text-align:left">3</td><td>#text</td><td>文字内容</td></tr><tr><td style="text-align:left">注释节点</td><td style="text-align:left">8</td><td>#comment</td><td>注释内容</td></tr><tr><td style="text-align:left">document</td><td style="text-align:left">9</td><td>#document</td><td>null</td></tr></tbody></table><h4 id="小案例，模拟children方法"><a href="#小案例，模拟children方法" class="headerlink" title="小案例，模拟children方法"></a>小案例，模拟children方法</h4><p>模拟children方法，实现获取指定元素下所有的元素子节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span><span class="line">45</span><span class="line">46</span><span class="line">47</span><span class="line">48</span><span class="line">49</span><span class="line">50</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 获取 children 标签元素 可以设置筛选</span></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getChildren</span>(<span class="params">ele,tagName</span>) </span>&#123;</span><span class="line">  <span class="keyword">var</span> ary = [];</span><span class="line">  <span class="keyword">var</span> nodes = ele.childNodes; <span class="comment">// 拿到元素下所有的子节点</span></span><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span><span class="line">    <span class="keyword">var</span> cur = nodes[i];</span><span class="line">    <span class="keyword">if</span> (cur.nodeType===<span class="number">1</span>) &#123;</span><span class="line">      <span class="keyword">if</span> (tagName) &#123;</span><span class="line">        <span class="comment">// 如果传了tagName，再次筛选</span></span><span class="line">        <span class="keyword">if</span> (cur.nodeName.toLowerCase() === tagName.toLowerCase()) &#123;</span><span class="line">          <span class="comment">// 注意nodeName是大写，但是传入的参数不确定，所有先都转为小写</span></span><span class="line">          ary.push(cur)</span><span class="line">        &#125;</span><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><span class="line">        <span class="comment">// 如果没传tagName，默认将所有的子元素节点返回</span></span><span class="line">        ary.push(cur)</span><span class="line">      &#125;</span><span class="line">    &#125;</span><span class="line">  &#125;</span><span class="line">  <span class="keyword">return</span> ary;</span><span class="line">&#125;</span><span class="line"><span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><span class="line">getChildren(<span class="built_in">document</span>.getElementById(box, <span class="string">'p'</span>))</span><span class="line"></span><span class="line"><span class="comment">// 2. 获取 children 标签元素 可以设置筛选，根据兼容处理</span></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">childern</span> (<span class="params">curEle, tagName</span>) </span>&#123;</span><span class="line">  <span class="keyword">var</span> ary = []</span><span class="line">  <span class="keyword">if</span> (<span class="regexp">/MSIE (6|7|8)/i</span>.test(navigator.userAgent)) &#123;</span><span class="line">    <span class="keyword">var</span> nodes = ele.childNodes;</span><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span><span class="line">      <span class="keyword">var</span> cur = nodes[i];</span><span class="line">      <span class="keyword">if</span> (cur.nodeType === <span class="number">1</span>) &#123;</span><span class="line">        ary.push(cur)</span><span class="line">      &#125;</span><span class="line">    &#125;</span><span class="line">    nodes = <span class="literal">null</span></span><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><span class="line">    ary = <span class="built_in">Array</span>.prototype.slice.call(curEle.children)</span><span class="line">  &#125;</span><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> tagName === <span class="string">'string'</span>) &#123;</span><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; ary.length; k++) &#123;</span><span class="line">      <span class="keyword">var</span> curEle = ary[k]</span><span class="line">      <span class="keyword">if</span> (curEle.nodeName.toLowerCase() !== tagName.toLowerCase()) &#123;</span><span class="line">        ary.splice(k, <span class="number">1</span>)</span><span class="line">        k--</span><span class="line">      &#125;</span><span class="line">    &#125;</span><span class="line">  &#125;</span><span class="line">  <span class="keyword">return</span> ary</span><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="小案例，获取siblings"><a href="#小案例，获取siblings" class="headerlink" title="小案例，获取siblings"></a>小案例，获取siblings</h4><p>html 结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="line">  <span class="comment">&lt;!-- 我是注释 --&gt;</span></span><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">'li3'</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><span class="line"><span class="comment">&lt;!-- 如何通过js获取到3的上一个兄弟2 --&gt;</span></span><span class="line"><span class="comment">&lt;!-- 需要注意原生的 DOM 属性 previousSibling 会计算空格和回车还有注释等，所以往上找多少级不确定 --&gt;</span></span></pre></td></tr></table></figure><p>js 代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span><span class="line">45</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.获取上一个兄弟节点，兼容IE</span></span><span class="line"><span class="keyword">var</span> li3 = <span class="built_in">document</span>.getElementById(<span class="string">'li3'</span>)</span><span class="line"></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prev</span>(<span class="params">ele</span>) </span>&#123;</span><span class="line">  <span class="keyword">var</span> pre = ele.previousSibling;</span><span class="line">  <span class="keyword">while</span> (pre &amp;&amp; pre.nodeType !== <span class="number">1</span>) &#123;</span><span class="line">    pre = pre.previousSibling;</span><span class="line">  &#125;</span><span class="line">  <span class="keyword">return</span> pre</span><span class="line">&#125;</span><span class="line">prev(li3)</span><span class="line"></span><span class="line"><span class="comment">// 2. 获取上一个兄弟节点，previousElementSibling 标准浏览器</span></span><span class="line"></span><span class="line"><span class="comment">// 3.获取所有的上级兄弟节点</span></span><span class="line"><span class="keyword">var</span> li3 = <span class="built_in">document</span>.getElementById(<span class="string">'li3'</span>)</span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prevAll</span>(<span class="params">ele</span>) </span>&#123;</span><span class="line">  <span class="keyword">var</span> ary = [];</span><span class="line">  <span class="keyword">var</span> pre = ele.previousSibling;</span><span class="line">  <span class="keyword">while</span> (pre) &#123;</span><span class="line">    <span class="keyword">if</span> (pre.nodeType === <span class="number">1</span>) &#123;</span><span class="line">      ary.unshift(pre)</span><span class="line">    &#125;</span><span class="line">    pre = pre.previousSibling;</span><span class="line">  &#125;</span><span class="line">  <span class="keyword">return</span> ary</span><span class="line">&#125;</span><span class="line">prevAll(li3)</span><span class="line"></span><span class="line"><span class="comment">// 4. 获取当前元素的索引</span></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params">curEle</span>) </span>&#123;</span><span class="line">  <span class="comment">// 有几个哥哥就是几</span></span><span class="line">  <span class="keyword">var</span> ary = [];</span><span class="line">  <span class="keyword">var</span> pre = curEle.previousElementSibling;</span><span class="line">  <span class="keyword">while</span> (pre) &#123;</span><span class="line">    ary.unshift(pre)</span><span class="line">    pre = pre.previousElementSibling;</span><span class="line">  &#125;</span><span class="line">  <span class="keyword">return</span> ary.length</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">// 5. firstchild 第一个元素节点</span></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstChild</span> (<span class="params">parentNode</span>) </span>&#123;</span><span class="line">  <span class="keyword">return</span> parentNode.children[<span class="number">0</span>] ? parentNode.children[<span class="number">0</span>] : <span class="literal">null</span></span><span class="line">&#125;</span></pre></td></tr></table></figure><h3 id="DOM-增删改"><a href="#DOM-增删改" class="headerlink" title="DOM 增删改"></a>DOM 增删改</h3><ul><li>document.createElement(‘div’); 动态创建一个标签元素</li><li>box.appendChild() 将元素添加到指定的容器中的末尾</li><li>insertBefore(newItem,existingItem) 把新的元素插入到老得元素之前，如果老元素不存在，会放到末尾</li><li>removeChild(item) 删除元素</li><li>cloneNode(true || false) 克隆元素默认false只克隆当前元素，true clone 子孙</li><li>replaceChild(newnode,oldnode)</li><li>document.createDocumentFragment() 创建文档碎片</li></ul><p>属性的增删改查</p><ul><li>setAttribute()</li><li>getAttribute()</li><li>removeAttribute() 在IE 6~8 中不能修改class属性 box.className可以</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. append</span></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">append</span> (<span class="params">newEle, container</span>) </span>&#123;</span><span class="line">  container.appendChild(newEle)</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">// 2. prepend</span></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepend</span> (<span class="params">newEle, container</span>) </span>&#123;</span><span class="line">  <span class="keyword">var</span> firstChild = container.children[<span class="number">0</span>] ? parentNode.children[<span class="number">0</span>] : <span class="literal">null</span></span><span class="line">  container.insertBefore(newEle, firstChild)</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">// 3. insertBefore</span></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertBefore</span> (<span class="params">newEle, oldEle</span>) </span>&#123;</span><span class="line">  oldEle.parentNode.insertBefore(newEle, oldEle)</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">// 4. insertAfter</span></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertAfter</span> (<span class="params">newEle, oldEle</span>) </span>&#123;</span><span class="line">  oldEle.parentNode.insertBefore(newEle, oldEle.nextElementSibling)</span><span class="line">&#125;</span></pre></td></tr></table></figure><h3 id="dom-数据绑定方法"><a href="#dom-数据绑定方法" class="headerlink" title="dom 数据绑定方法"></a>dom 数据绑定方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 通过 document.createElement 进行创建插入，会造成多次 dom 回流，即重新渲染 dom，造成性能浪费，不影响原有的 dom</span></span><span class="line"><span class="built_in">document</span>.createElement</span><span class="line"><span class="built_in">document</span>.appendChild</span><span class="line"></span><span class="line"><span class="comment">// 2. 字符串拼接，只需要一次回流，但是会造成原有的 dom 丢失事件绑定</span></span><span class="line"><span class="keyword">var</span> str = <span class="string">'&lt;span&gt;aa&lt;/span&gt;'</span></span><span class="line">box.innerHTML = str</span><span class="line"></span><span class="line"><span class="comment">// 3. 文档碎片</span></span><span class="line"><span class="keyword">var</span> frg = <span class="built_in">document</span>.createDocumentFragment() <span class="comment">// 创建一个文档碎片相当于临时创建了一个容器</span></span><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><span class="line">  <span class="keyword">var</span> oLi = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</span><span class="line">  oLi.innerHTML = i</span><span class="line">  frg.appendChild(oLi)</span><span class="line">&#125;</span><span class="line">oUl.appendChild(frg) <span class="comment">// 优点:不影响原有 li，一次回流</span></span><span class="line">frg = <span class="literal">null</span></span></pre></td></tr></table></figure><h3 id="操作元素-class-属性"><a href="#操作元素-class-属性" class="headerlink" title="操作元素 class 属性"></a>操作元素 class 属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. hasClass 是否包含某个class，可以直接用 dom.classList.contains</span></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasClass</span> (<span class="params">curEle, className</span>) </span>&#123;</span><span class="line">  <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(^|\\s)'</span> + className + <span class="string">'(\\s|$)'</span>)</span><span class="line">  <span class="comment">// var reg = new RegExp('(^| +)' + className + '( +|$)')</span></span><span class="line">  <span class="keyword">return</span> reg.test(curEle.className)</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">// 2. addClass支持传多个class，以空格隔开，可以直接用 dom.classList.add(class,class,...)，不过存在兼容问题</span></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">curEle, className</span>) </span>&#123;</span><span class="line">  <span class="keyword">var</span> ary = className.replace(<span class="regexp">/(^ +| +$)/g</span>, <span class="string">''</span>).split(<span class="regexp">/ +/g</span>) <span class="comment">// split(' ')</span></span><span class="line"></span><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ary.length; i++) &#123;</span><span class="line">    <span class="keyword">var</span> curClass = ary[i]</span><span class="line">    <span class="keyword">if</span> (!hasClass(curEle, curClass)) &#123;</span><span class="line">      curEle.className += <span class="string">' '</span> + curClass</span><span class="line">    &#125;</span><span class="line">  &#125;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">// 3. removeClass，支持传多个class，以空格隔开，可以直接用 dom.classList.remove(class, class, ...)，不过存在兼容问题</span></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeClass</span>(<span class="params">curEle, className</span>) </span>&#123;</span><span class="line">  <span class="keyword">var</span> ary = className.replace(<span class="regexp">/(^ +| +$)/g</span>, <span class="string">''</span>).split(<span class="regexp">/ +/g</span>)</span><span class="line"></span><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ary.length; i++) &#123;</span><span class="line">    <span class="keyword">var</span> curClass = ary[i]</span><span class="line">    <span class="keyword">if</span> (hasClass(curEle, curClass)) &#123;</span><span class="line">      <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(^| +)'</span> + curClass + <span class="string">'( +|$)'</span>, <span class="string">'g'</span>)</span><span class="line">      curEle.className = curEle.className.replace(reg, <span class="string">' '</span>).trim()</span><span class="line">    &#125;</span><span class="line">  &#125;</span><span class="line">&#125;</span></pre></td></tr></table></figure><h3 id="getElementsByClassName-的兼容处理"><a href="#getElementsByClassName-的兼容处理" class="headerlink" title="getElementsByClassName 的兼容处理"></a>getElementsByClassName 的兼容处理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// className: 要获取的元素的样式类名，可能一个也可能多个，多个之间用空格（几个都行）隔开</span></span><span class="line"><span class="comment">// context: 获取元素的上下文，不传的话默认为 document</span></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementsByClass</span> (<span class="params">className, context</span>) </span>&#123;</span><span class="line">  context = context || <span class="built_in">document</span></span><span class="line">  <span class="keyword">var</span> classNameAry = className.replace(<span class="regexp">/(^ +| +$)/g</span>, <span class="string">''</span>).split(<span class="regexp">/ +/g</span>)</span><span class="line">  <span class="comment">// 获取上下文包含的所有标签</span></span><span class="line">  <span class="keyword">var</span> nodeList = context.getElementsByTagName(<span class="string">'*'</span>)</span><span class="line">  <span class="keyword">var</span> ary = []</span><span class="line"></span><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodeList.length; i++) &#123;</span><span class="line">    <span class="keyword">var</span> curNode = nodeList[i]</span><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span></span><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; classNameAry.length; k++) &#123;</span><span class="line">      <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(^| +)'</span> + classNameAry[k] + <span class="string">'( +|$)'</span>)</span><span class="line">      <span class="keyword">if</span> (!reg.test(curNode.className)) &#123;</span><span class="line">        flag = <span class="literal">false</span></span><span class="line">        <span class="keyword">break</span></span><span class="line">      &#125;</span><span class="line">    &#125;</span><span class="line"></span><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><span class="line">      ary.push(curNode)</span><span class="line">    &#125;</span><span class="line">  &#125;</span><span class="line">&#125;</span></pre></td></tr></table></figure><h3 id="操作浏览器属性"><a href="#操作浏览器属性" class="headerlink" title="操作浏览器属性"></a>操作浏览器属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两个参数，只传一个是获取，两个是设置</span></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">win</span> (<span class="params">attr, val</span>) </span>&#123;</span><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> val === <span class="string">'undefined'</span>) &#123;</span><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.documentElement[attr] || <span class="built_in">document</span>.body[attr]</span><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><span class="line">    <span class="built_in">document</span>.documentElement[attr] = val</span><span class="line">    <span class="built_in">document</span>.body[attr] = val</span><span class="line">  &#125;</span><span class="line">&#125;</span></pre></td></tr></table></figure><h3 id="获取元素样式属性值"><a href="#获取元素样式属性值" class="headerlink" title="获取元素样式属性值"></a>获取元素样式属性值</h3><ol><li>元素.style.属性：样式必须写在行内样式(不常用)</li><li>通过 window 提供的一个方法 getComputedStyle 来获取所有经过浏览器计算过的（只要当前元素标签可以在页面中呈现出来，那么它的样式都是经过浏览器的计算／渲染过的，哪怕有些样式没有写，同样可以获取）样式属性。IE 6,7,8 不兼容</li><li>在 IE 6,7,8 下使用 currentStyle 来获取元素的样式属性，不支持伪类 box.currentStyle[attr]</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数是要获取的 dom 元素，第二个是伪类，一般不用，获取到的是当前元素的所有的样式</span></span><span class="line"><span class="built_in">window</span>.getComputedStyle(<span class="string">'元素'</span>, <span class="string">'伪类'</span>)[attr]</span><span class="line"></span><span class="line"><span class="comment">// 兼容，不同浏览器获取到的属性不一定相同，主要是 IE 的其他的问题</span></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span> (<span class="params">element, attr</span>) </span>&#123;</span><span class="line">  <span class="keyword">let</span> val = <span class="literal">null</span></span><span class="line">  <span class="keyword">if</span> (<span class="string">'getComputedStyle'</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><span class="line">    val = <span class="built_in">window</span>.getComputedStyle(element)[attr]</span><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><span class="line">    <span class="comment">// IE 6,7,8</span></span><span class="line">    <span class="keyword">if</span> (attr === <span class="string">'opacity'</span>) &#123;</span><span class="line">      val = element.currentStyle[<span class="string">'filter'</span>] <span class="comment">// 将数字除以 100 为标准浏览器的 opacity</span></span><span class="line">      <span class="keyword">let</span> reg = <span class="regexp">/^alpha\(opacity=(\d+(?:\.\d+)?)\)$/i</span> <span class="comment">// 第二次升级：匹配 0-100 的整数或小数，将第一个分组捕获，?: 只匹配不捕获</span></span><span class="line">      val = reg.test(val) ? reg.exec(val)[<span class="number">1</span>] / <span class="number">100</span> : <span class="number">1</span></span><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><span class="line">      val = element.currentStyle[attr]</span><span class="line">    &#125;</span><span class="line">  &#125;</span><span class="line">  <span class="keyword">let</span> reg = <span class="regexp">/^(-?\d+(\.\d+)?)(px|pt|rem|em)?$/i</span> <span class="comment">// 第一次升级：去掉数值单位，数字开头px,pt等单位结尾的单个数值</span></span><span class="line">  <span class="keyword">return</span> reg.test(val) ? <span class="built_in">parseFloat</span>(val) : val</span><span class="line">&#125;</span><span class="line">getStyle(box, <span class="string">'width'</span>) <span class="comment">// 需要去掉单位的功能</span></span><span class="line">getStyle(box, <span class="string">'opacity'</span>) <span class="comment">// IE 6-8 不设置这个属性，设置的是 filter: alpha(opacity=10)</span></span></pre></td></tr></table></figure><h3 id="修改-dom-样式"><a href="#修改-dom-样式" class="headerlink" title="修改 dom 样式"></a>修改 dom 样式</h3><p>在 js 中给元素设置样式属性值，我们只能通过 dom.style[attr] = value 这种方式给当前元素设置行内样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span><span class="line">45</span><span class="line">46</span><span class="line">47</span><span class="line">48</span><span class="line">49</span><span class="line">50</span><span class="line">51</span><span class="line">52</span><span class="line">53</span><span class="line">54</span><span class="line">55</span><span class="line">56</span><span class="line">57</span><span class="line">58</span><span class="line">59</span><span class="line">60</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 单个样式设置。某些传递进来的值没有单位，把默认单位补上</span></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCss</span> (<span class="params">curEle, attr, value</span>) </span>&#123;</span><span class="line">  <span class="comment">// 兼容 float 样式值</span></span><span class="line">  <span class="keyword">if</span> (attr === <span class="string">'float'</span>) &#123;</span><span class="line">    curEle[<span class="string">'style'</span>][<span class="string">'cssFloat'</span>] = value</span><span class="line">    curEle[<span class="string">'style'</span>][<span class="string">'styleFloat'</span>] = value</span><span class="line">    <span class="keyword">return</span></span><span class="line">  &#125;</span><span class="line"></span><span class="line">  <span class="comment">// 兼容 opacity</span></span><span class="line">  <span class="keyword">if</span> (attr === <span class="string">'opacity'</span>) &#123;</span><span class="line">    curEle[<span class="string">'style'</span>][attr] = value</span><span class="line">    curEle[<span class="string">'style'</span>][<span class="string">'filter'</span>] = <span class="string">'alpha(opacity='</span> + value * <span class="number">100</span> + <span class="string">')'</span> </span><span class="line">    <span class="keyword">return</span></span><span class="line">  &#125;</span><span class="line"></span><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/^(width|height|top|bottom|left|right|((margin|padding)(Top|Bottom|Left|Right)?))$/</span></span><span class="line">  <span class="keyword">if</span> (reg.test(attr)) &#123;</span><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(value)) &#123;</span><span class="line">      value += <span class="string">'px'</span></span><span class="line">    &#125;</span><span class="line">  &#125;</span><span class="line">  curEle[<span class="string">'style'</span>][attr] = value</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">// 2. 批量设置样式</span></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setGroupCss</span> (<span class="params">curEle, options</span>) </span>&#123;</span><span class="line">  options = options || <span class="number">0</span> <span class="comment">// 防止没传值的时候调用 toString 方法出错</span></span><span class="line">  <span class="comment">// 检测 options 的数据类型</span></span><span class="line">  <span class="keyword">if</span> (options.toString() !== <span class="string">'[object Object]'</span>) &#123;</span><span class="line">    <span class="keyword">return</span></span><span class="line">  &#125;</span><span class="line"></span><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> options) &#123;</span><span class="line">    <span class="keyword">if</span> (options.hasOwnProperty(key)) &#123;</span><span class="line">      <span class="keyword">this</span>.setCss(curEle, key, options[key])</span><span class="line">    &#125;</span><span class="line">  &#125;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">// 3. 模拟 jquery 中的 css 方法。实现获取，单独设置，批量设置元素的样式</span></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">css</span> (<span class="params">curEle</span>) </span>&#123;</span><span class="line">  <span class="keyword">var</span> argTwo = <span class="built_in">arguments</span>[<span class="number">1</span>]</span><span class="line">  <span class="keyword">var</span> ary = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> argTwo === <span class="string">'string'</span>) &#123;</span><span class="line">    <span class="keyword">var</span> argThree = <span class="built_in">arguments</span>[<span class="number">2</span>]</span><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> argThree === <span class="string">'undefined'</span>) &#123;</span><span class="line">      <span class="comment">// 第三个参数可能是数字 0，所以这里必须是 undefined</span></span><span class="line">      <span class="keyword">return</span> getStyle(curEle, argTwo)</span><span class="line">    &#125;</span><span class="line">    setCss.apply(curEle, ary)</span><span class="line">    <span class="comment">// this.setCss(curEle, argTwo, argThree)</span></span><span class="line">    <span class="keyword">return</span></span><span class="line">  &#125;</span><span class="line">  <span class="comment">// 设置多个样式</span></span><span class="line">  argTwo = argTwo || <span class="number">0</span></span><span class="line">  <span class="keyword">if</span> (argTwo.toString() === <span class="string">'[object Object]'</span>) &#123;</span><span class="line">    setGroupCss.apply(curEle, ary)</span><span class="line">  &#125;</span><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;DOM: Document object model 文档对象模型，描述整个html页面中节点关系的谱图。熟练操作 DOM 在我们的日常开发中非常重要。&lt;/p&gt;
&lt;h2 id=&quot;js-DOM元素获取的方法-8种&quot;&gt;&lt;a href=&quot;#js-DOM元素获取的方法-8种&quot; cl
      
    
    </summary>
    
      <category term="前端" scheme="https://newming.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="https://newming.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>网站升级 HTTPS</title>
    <link href="https://newming.github.io/2017/12/23/enable-mysite-https/"/>
    <id>https://newming.github.io/2017/12/23/enable-mysite-https/</id>
    <published>2017-12-23T10:03:26.000Z</published>
    <updated>2018-03-05T05:53:43.356Z</updated>
    
    <content type="html"><![CDATA[<p>哈哈，从今天开始，我的网站正式升级 https，从此不在被可恶的运营商注入广告了。这里主要记录一下繁琐的升级过程。</p><p>首先要感谢<a href="https://coolshell.cn/articles/18094.html" target="_blank" rel="external">耗子哥的文章</a>以及免费的 https 证书提供机构<a href="https://letsencrypt.org/" target="_blank" rel="external">let’s Encrypt</a>，当然还有很多其他文章的指导。</p><p>目前我关注的网站主要是两个，一个是放到自己服务器上的<a href="www.newming.cn">主站</a>，另一个是托管到 <a href="https://github.com" target="_blank" rel="external">github</a> 的<a href="newming.cn">博客</a>，由于博客是托管到 github 的，当时为了访问方便，做了 CNAME，绑定到了 newming.cn 上，而绑定方案是通过 dns 服务商处将 newming.cn 的记录直接指向了我的 github 博客的 ip，所以，如果要给博客升级 https 就不能在这么做了。</p><h2 id="第一步-反向代理-gh-pages"><a href="#第一步-反向代理-gh-pages" class="headerlink" title="第一步: 反向代理 gh-pages"></a>第一步: 反向代理 gh-pages</h2><p><a href="https://imciel.com/2016/05/09/github-pages-reverse-proxy-https/" target="_blank" rel="external">参考文章</a></p><p>第一步要做的就是将我的 dns 配置中以前指向 GitHub 的两条记录停掉，转而指向我的服务器。</p><p>第二布就是在我的服务器上去增加 newming.cn 这个域名的配置了，具体代码如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><span class="line">  <span class="attribute">server_name</span> newming.cn;</span><span class="line"></span><span class="line"><span class="attribute">location</span> / &#123;</span><span class="line"><span class="attribute">proxy_pass</span>https://newming.github.io;</span><span class="line"><span class="attribute">proxy_redirect</span>     <span class="literal">off</span>;</span><span class="line"><span class="attribute">proxy_set_header</span>   Host <span class="variable">$host</span>;</span><span class="line"><span class="attribute">proxy_set_header</span>   X-Real-IP <span class="variable">$remote_addr</span>;</span><span class="line"><span class="attribute">proxy_set_header</span>   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><span class="line">&#125;</span><span class="line">&#125;</span></pre></td></tr></table></figure><p>配置完成之后直接 <code>sudo nginx -s reload</code> 重启即可</p><h2 id="第二步-部署-https"><a href="#第二步-部署-https" class="headerlink" title="第二步: 部署 https"></a>第二步: 部署 https</h2><p><a href="https://coolshell.cn/articles/18094.html" target="_blank" rel="external">参考文章</a></p><p>这里直接按文章步骤执行即可，其中在执行 <code>sudo certbot --nginx</code> 有些需要可选项可以根据自己情况选择，比如是否强制跳转 https，这里我选择的是，当然你也可以在之后自行修改 nginx 配置文件。</p><h2 id="第三步-升级-nginx"><a href="#第三步-升级-nginx" class="headerlink" title="第三步: 升级 nginx"></a>第三步: 升级 nginx</h2><p>因为开启 http2需要高版本的 nginx，所以就做了一个 nginx 升级，如果你的配置文件较为重要，请提前备份，这里我备份了 <code>/etc/nginx/nginx.conf</code> 文件，不过后来发现，再升级的时候 nginx 会自动给我备份出来一个 <code>/etc/nginx/nginx.conf.dpkg-old</code> 文件。升级中同样会有一些选择，其中有一个是否使用最新的配置文件，这里我选了是，之后一路平坦。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:nginx/stable</span><span class="line">sudo apt-get update</span><span class="line">sudo apt-get install nginx</span></pre></td></tr></table></figure><p>至此，折腾完毕，整整一下午过去了。生命不止，折腾不止。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;哈哈，从今天开始，我的网站正式升级 https，从此不在被可恶的运营商注入广告了。这里主要记录一下繁琐的升级过程。&lt;/p&gt;
&lt;p&gt;首先要感谢&lt;a href=&quot;https://coolshell.cn/articles/18094.html&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
      <category term="网站" scheme="https://newming.github.io/categories/%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="nginx" scheme="https://newming.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>position sticky 属性</title>
    <link href="https://newming.github.io/2017/12/19/position-sticky/"/>
    <id>https://newming.github.io/2017/12/19/position-sticky/</id>
    <published>2017-12-19T06:02:30.000Z</published>
    <updated>2018-03-05T06:59:27.993Z</updated>
    
    <content type="html"><![CDATA[<p>今天带来的是一个逆天的 css 属性，position: <code>sticky</code>。粘性定位。</p><p>相信大家对 css 中 <code>position</code> 属性的用法不陌生，那么今天这个属性是做什么的呢？他就是用来做吸顶的效果的，不需要 js 计算，只需要两条 css 属性即可。</p><p>请看下方效果，标题 A,C,E,T等自动吸顶。</p><p></p><p data-height="265" data-theme-id="0" data-slug-hash="RxraOx" data-default-tab="html,result" data-user="newming" data-embed-version="2" data-pen-title="粘性定位" class="codepen">See the Pen <a href="https://codepen.io/newming/pen/RxraOx/" target="_blank" rel="external">粘性定位</a> by newming (<a href="https://codepen.io/newming" target="_blank" rel="external">@newming</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p>其中核心代码就只有两句 css。其中 top 为吸顶效果的边界值。我们可以想像成加了 sticky 属性后，这个元素会自动去按照我们的给定的边界值计算，具体表现为什么。具体来说就是按照 position: fixed; 来算。比如例子中，当标题 fixed 后，它当前的位置的值如果比我们给定的 -1px 小，就表现为 fixed 的效果，如果大于 -1px，表现为 relative 效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">sticky</span>;</span><span class="line"><span class="selector-tag">top</span>: <span class="selector-tag">-1px</span>;</span></pre></td></tr></table></figure><p>综上，sticky 会变现出两种其他 position 效果，当小于边界值，为 fixed，反之则 relative。有个蛋疼的地方是： android 表现不佳。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天带来的是一个逆天的 css 属性，position: &lt;code&gt;sticky&lt;/code&gt;。粘性定位。&lt;/p&gt;
&lt;p&gt;相信大家对 css 中 &lt;code&gt;position&lt;/code&gt; 属性的用法不陌生，那么今天这个属性是做什么的呢？他就是用来做吸顶的效果的，不需要 
      
    
    </summary>
    
      <category term="前端" scheme="https://newming.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="https://newming.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>自定义 range input 样式</title>
    <link href="https://newming.github.io/2017/12/15/custom-range-style/"/>
    <id>https://newming.github.io/2017/12/15/custom-range-style/</id>
    <published>2017-12-15T04:44:02.000Z</published>
    <updated>2017-12-24T03:27:07.223Z</updated>
    
    <content type="html"><![CDATA[<p>最近由于业务需求需要做一个控制音量的滑块按钮组件，由于 js 实现起来比较复杂，需要考虑 <code>touch</code> 和 <code>click</code> 之间的切换。所以决定使用 h5 新增的 input range 来实现，只要改掉其默认样式就好。</p><p>几番搜索之后找到了 <a href="https://css-tricks.com/styling-cross-browser-compatible-range-inputs-css/" target="_blank" rel="external">css tricks</a> 的一篇文章，非常不错，所以再此简单记录顺带翻译(-_^)一下。（准不准确不好说）</p><p>首先统一一下说法，range input 有两部分，可以拖动的叫滑块(thumb)，底部的是 track</p><h3 id="第一步：去掉默认样式"><a href="#第一步：去掉默认样式" class="headerlink" title="第一步：去掉默认样式"></a>第一步：去掉默认样式</h3><p>需要根据浏览器需要处理他们不同的默认样式，这里需要覆盖好几条样式属性。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span> &#123;</span><span class="line">  <span class="attribute">-webkit-appearance</span>: none; <span class="comment">/* 去掉底部的 track 默认样式，就是整个灰条 */</span></span><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>; <span class="comment">/* Firefox 需要指定明确的宽度 */</span></span><span class="line">  <span class="attribute">background</span>: transparent; <span class="comment">/* 否则在 Chrome 中是白色背景 */</span></span><span class="line">&#125;</span><span class="line"><span class="comment">/* 去掉 webkit 内核 滑块 的样式 */</span></span><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">::-webkit-slider-thumb</span> &#123;</span><span class="line">  <span class="attribute">-webkit-appearance</span>: none;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">:focus</span> &#123;</span><span class="line">  <span class="attribute">outline</span>: none; <span class="comment">/* 去除获取焦点时蓝色的外边框，你也可以自己定制其他你想要的效果 */</span></span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">::-ms-track</span> &#123;</span><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><span class="line">  <span class="attribute">cursor</span>: pointer;</span><span class="line"></span><span class="line">  <span class="comment">/* 这个是 IE 的 track 样式，没验证过 */</span></span><span class="line">  <span class="attribute">background</span>: transparent;</span><span class="line">  <span class="attribute">border-color</span>: transparent;</span><span class="line">  <span class="attribute">color</span>: transparent;</span><span class="line">&#125;</span></pre></td></tr></table></figure><p>到此我们已经有了一个兼容各浏览器的看不见的或者说没有样式的 range input。现在我们开始添加自定义的样式</p><h3 id="第二步：给滑块增加样式"><a href="#第二步：给滑块增加样式" class="headerlink" title="第二步：给滑块增加样式"></a>第二步：给滑块增加样式</h3><p>你点击或者拖拽的那个小玩意叫做滑块（thumb），它就像一个普通的 HTML 元素一样可以被定义各种样式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/* WebKit/Blink 样式定义 */</span></span><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">::-webkit-slider-thumb</span> &#123;</span><span class="line">  <span class="attribute">-webkit-appearance</span>: none;</span><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><span class="line">  <span class="attribute">height</span>: <span class="number">36px</span>;</span><span class="line">  <span class="attribute">width</span>: <span class="number">16px</span>;</span><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><span class="line">  <span class="attribute">background</span>: <span class="number">#ffffff</span>;</span><span class="line">  <span class="attribute">cursor</span>: pointer;</span><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">14px</span>; <span class="comment">/* 在 Chrome 中你需要给定一个明确的 margin，但是在 Firefox 和 IE 中这个是固定的 */</span></span><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#000000</span>, <span class="number">0px</span> <span class="number">0px</span> <span class="number">1px</span> <span class="number">#0d0d0d</span>; <span class="comment">/* 添加一条炫酷的效果为你的 thumb */</span></span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">/* Firefox 同上 */</span></span><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">::-moz-range-thumb</span> &#123;</span><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#000000</span>, <span class="number">0px</span> <span class="number">0px</span> <span class="number">1px</span> <span class="number">#0d0d0d</span>;</span><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><span class="line">  <span class="attribute">height</span>: <span class="number">36px</span>;</span><span class="line">  <span class="attribute">width</span>: <span class="number">16px</span>;</span><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><span class="line">  <span class="attribute">background</span>: <span class="number">#ffffff</span>;</span><span class="line">  <span class="attribute">cursor</span>: pointer;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">/* IE 同上 */</span></span><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">::-ms-thumb</span> &#123;</span><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#000000</span>, <span class="number">0px</span> <span class="number">0px</span> <span class="number">1px</span> <span class="number">#0d0d0d</span>;</span><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><span class="line">  <span class="attribute">height</span>: <span class="number">36px</span>;</span><span class="line">  <span class="attribute">width</span>: <span class="number">16px</span>;</span><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><span class="line">  <span class="attribute">background</span>: <span class="number">#ffffff</span>;</span><span class="line">  <span class="attribute">cursor</span>: pointer;</span><span class="line">&#125;</span></pre></td></tr></table></figure><blockquote><p>注意我们重复的写了很多代码，但这是必须的，你不能使用逗号去分割这几个选择器。浏览器会忽略全部的选择器如果逗号连接的部分中存在它不识别的。</p></blockquote><p>现在我们的滑块是这个样子的:</p><p><img src="/images/invis-track.png" alt="invis-track"></p><h3 id="第三步：给-track-添加样式"><a href="#第三步：给-track-添加样式" class="headerlink" title="第三步：给 track 添加样式"></a>第三步：给 track 添加样式</h3><p>thumb 所在的可滑动的那条线就是 track，它也像一个普通的 HTML 元素一样可以被定义各种样式。</p><blockquote><p>在 IE 中需要注意：IE 10 以上有一些细微的不同表现。在 IE 中，你可以为 track 分别定义 thumb 左(lower)右(upper) 两边的样式。</p><p>另外需要注意的是你可以添加 track 的 focus 效果，当用户与 range input 进行交互的时候</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span><span class="line">45</span><span class="line">46</span><span class="line">47</span><span class="line">48</span><span class="line">49</span><span class="line">50</span><span class="line">51</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">::-webkit-slider-runnable-track</span> &#123;</span><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><span class="line">  <span class="attribute">height</span>: <span class="number">8.4px</span>;</span><span class="line">  <span class="attribute">cursor</span>: pointer;</span><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#000000</span>, <span class="number">0px</span> <span class="number">0px</span> <span class="number">1px</span> <span class="number">#0d0d0d</span>;</span><span class="line">  <span class="attribute">background</span>: <span class="number">#3071a9</span>;</span><span class="line">  <span class="attribute">border-radius</span>: <span class="number">1.3px</span>;</span><span class="line">  <span class="attribute">border</span>: <span class="number">0.2px</span> solid <span class="number">#010101</span>;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">:focus</span><span class="selector-pseudo">::-webkit-slider-runnable-track</span> &#123;</span><span class="line">  <span class="attribute">background</span>: <span class="number">#367ebd</span>;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">::-moz-range-track</span> &#123;</span><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><span class="line">  <span class="attribute">height</span>: <span class="number">8.4px</span>;</span><span class="line">  <span class="attribute">cursor</span>: pointer;</span><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#000000</span>, <span class="number">0px</span> <span class="number">0px</span> <span class="number">1px</span> <span class="number">#0d0d0d</span>;</span><span class="line">  <span class="attribute">background</span>: <span class="number">#3071a9</span>;</span><span class="line">  <span class="attribute">border-radius</span>: <span class="number">1.3px</span>;</span><span class="line">  <span class="attribute">border</span>: <span class="number">0.2px</span> solid <span class="number">#010101</span>;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">::-ms-track</span> &#123;</span><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><span class="line">  <span class="attribute">height</span>: <span class="number">8.4px</span>;</span><span class="line">  <span class="attribute">cursor</span>: pointer;</span><span class="line">  <span class="attribute">background</span>: transparent;</span><span class="line">  <span class="attribute">border-color</span>: transparent;</span><span class="line">  <span class="attribute">border-width</span>: <span class="number">16px</span> <span class="number">0</span>;</span><span class="line">  <span class="attribute">color</span>: transparent;</span><span class="line">&#125;</span><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">::-ms-fill-lower</span> &#123;</span><span class="line">  <span class="attribute">background</span>: <span class="number">#2a6495</span>;</span><span class="line">  <span class="attribute">border</span>: <span class="number">0.2px</span> solid <span class="number">#010101</span>;</span><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2.6px</span>;</span><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#000000</span>, <span class="number">0px</span> <span class="number">0px</span> <span class="number">1px</span> <span class="number">#0d0d0d</span>;</span><span class="line">&#125;</span><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">:focus</span><span class="selector-pseudo">::-ms-fill-lower</span> &#123;</span><span class="line">  <span class="attribute">background</span>: <span class="number">#3071a9</span>;</span><span class="line">&#125;</span><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">::-ms-fill-upper</span> &#123;</span><span class="line">  <span class="attribute">background</span>: <span class="number">#3071a9</span>;</span><span class="line">  <span class="attribute">border</span>: <span class="number">0.2px</span> solid <span class="number">#010101</span>;</span><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2.6px</span>;</span><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#000000</span>, <span class="number">0px</span> <span class="number">0px</span> <span class="number">1px</span> <span class="number">#0d0d0d</span>;</span><span class="line">&#125;</span><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">:focus</span><span class="selector-pseudo">::-ms-fill-upper</span> &#123;</span><span class="line">  <span class="attribute">background</span>: <span class="number">#367ebd</span>;</span><span class="line">&#125;</span></pre></td></tr></table></figure><p>现在你的 track 看起来是这样的：</p><p><img src="/images/no-thumb.png" alt="no-thumb"></p><h3 id="最后：完整的-Range-Input"><a href="#最后：完整的-Range-Input" class="headerlink" title="最后：完整的 Range Input"></a>最后：完整的 Range Input</h3><p>我们在上边已经创建了一个 thumb 和一个 track，我们可以将 css 进行合并。</p><p>完整的 css 如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span><span class="line">45</span><span class="line">46</span><span class="line">47</span><span class="line">48</span><span class="line">49</span><span class="line">50</span><span class="line">51</span><span class="line">52</span><span class="line">53</span><span class="line">54</span><span class="line">55</span><span class="line">56</span><span class="line">57</span><span class="line">58</span><span class="line">59</span><span class="line">60</span><span class="line">61</span><span class="line">62</span><span class="line">63</span><span class="line">64</span><span class="line">65</span><span class="line">66</span><span class="line">67</span><span class="line">68</span><span class="line">69</span><span class="line">70</span><span class="line">71</span><span class="line">72</span><span class="line">73</span><span class="line">74</span><span class="line">75</span><span class="line">76</span><span class="line">77</span><span class="line">78</span><span class="line">79</span><span class="line">80</span><span class="line">81</span><span class="line">82</span><span class="line">83</span><span class="line">84</span><span class="line">85</span><span class="line">86</span><span class="line">87</span><span class="line">88</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span> &#123;</span><span class="line">  <span class="attribute">-webkit-appearance</span>: none;</span><span class="line">  <span class="attribute">margin</span>: <span class="number">18px</span> <span class="number">0</span>;</span><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><span class="line">&#125;</span><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">:focus</span> &#123;</span><span class="line">  <span class="attribute">outline</span>: none;</span><span class="line">&#125;</span><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">::-webkit-slider-runnable-track</span> &#123;</span><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><span class="line">  <span class="attribute">height</span>: <span class="number">8.4px</span>;</span><span class="line">  <span class="attribute">cursor</span>: pointer;</span><span class="line">  <span class="attribute">animate</span>: <span class="number">0.2s</span>;</span><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#000000</span>, <span class="number">0px</span> <span class="number">0px</span> <span class="number">1px</span> <span class="number">#0d0d0d</span>;</span><span class="line">  <span class="attribute">background</span>: <span class="number">#3071a9</span>;</span><span class="line">  <span class="attribute">border-radius</span>: <span class="number">1.3px</span>;</span><span class="line">  <span class="attribute">border</span>: <span class="number">0.2px</span> solid <span class="number">#010101</span>;</span><span class="line">&#125;</span><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">::-webkit-slider-thumb</span> &#123;</span><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#000000</span>, <span class="number">0px</span> <span class="number">0px</span> <span class="number">1px</span> <span class="number">#0d0d0d</span>;</span><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><span class="line">  <span class="attribute">height</span>: <span class="number">36px</span>;</span><span class="line">  <span class="attribute">width</span>: <span class="number">16px</span>;</span><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><span class="line">  <span class="attribute">background</span>: <span class="number">#ffffff</span>;</span><span class="line">  <span class="attribute">cursor</span>: pointer;</span><span class="line">  <span class="attribute">-webkit-appearance</span>: none;</span><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">14px</span>;</span><span class="line">&#125;</span><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">:focus</span><span class="selector-pseudo">::-webkit-slider-runnable-track</span> &#123;</span><span class="line">  <span class="attribute">background</span>: <span class="number">#367ebd</span>;</span><span class="line">&#125;</span><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">::-moz-range-track</span> &#123;</span><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><span class="line">  <span class="attribute">height</span>: <span class="number">8.4px</span>;</span><span class="line">  <span class="attribute">cursor</span>: pointer;</span><span class="line">  <span class="attribute">animate</span>: <span class="number">0.2s</span>;</span><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#000000</span>, <span class="number">0px</span> <span class="number">0px</span> <span class="number">1px</span> <span class="number">#0d0d0d</span>;</span><span class="line">  <span class="attribute">background</span>: <span class="number">#3071a9</span>;</span><span class="line">  <span class="attribute">border-radius</span>: <span class="number">1.3px</span>;</span><span class="line">  <span class="attribute">border</span>: <span class="number">0.2px</span> solid <span class="number">#010101</span>;</span><span class="line">&#125;</span><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">::-moz-range-thumb</span> &#123;</span><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#000000</span>, <span class="number">0px</span> <span class="number">0px</span> <span class="number">1px</span> <span class="number">#0d0d0d</span>;</span><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><span class="line">  <span class="attribute">height</span>: <span class="number">36px</span>;</span><span class="line">  <span class="attribute">width</span>: <span class="number">16px</span>;</span><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><span class="line">  <span class="attribute">background</span>: <span class="number">#ffffff</span>;</span><span class="line">  <span class="attribute">cursor</span>: pointer;</span><span class="line">&#125;</span><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">::-ms-track</span> &#123;</span><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><span class="line">  <span class="attribute">height</span>: <span class="number">8.4px</span>;</span><span class="line">  <span class="attribute">cursor</span>: pointer;</span><span class="line">  <span class="attribute">animate</span>: <span class="number">0.2s</span>;</span><span class="line">  <span class="attribute">background</span>: transparent;</span><span class="line">  <span class="attribute">border-color</span>: transparent;</span><span class="line">  <span class="attribute">border-width</span>: <span class="number">16px</span> <span class="number">0</span>;</span><span class="line">  <span class="attribute">color</span>: transparent;</span><span class="line">&#125;</span><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">::-ms-fill-lower</span> &#123;</span><span class="line">  <span class="attribute">background</span>: <span class="number">#2a6495</span>;</span><span class="line">  <span class="attribute">border</span>: <span class="number">0.2px</span> solid <span class="number">#010101</span>;</span><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2.6px</span>;</span><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#000000</span>, <span class="number">0px</span> <span class="number">0px</span> <span class="number">1px</span> <span class="number">#0d0d0d</span>;</span><span class="line">&#125;</span><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">::-ms-fill-upper</span> &#123;</span><span class="line">  <span class="attribute">background</span>: <span class="number">#3071a9</span>;</span><span class="line">  <span class="attribute">border</span>: <span class="number">0.2px</span> solid <span class="number">#010101</span>;</span><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2.6px</span>;</span><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#000000</span>, <span class="number">0px</span> <span class="number">0px</span> <span class="number">1px</span> <span class="number">#0d0d0d</span>;</span><span class="line">&#125;</span><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">::-ms-thumb</span> &#123;</span><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#000000</span>, <span class="number">0px</span> <span class="number">0px</span> <span class="number">1px</span> <span class="number">#0d0d0d</span>;</span><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><span class="line">  <span class="attribute">height</span>: <span class="number">36px</span>;</span><span class="line">  <span class="attribute">width</span>: <span class="number">16px</span>;</span><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><span class="line">  <span class="attribute">background</span>: <span class="number">#ffffff</span>;</span><span class="line">  <span class="attribute">cursor</span>: pointer;</span><span class="line">&#125;</span><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">:focus</span><span class="selector-pseudo">::-ms-fill-lower</span> &#123;</span><span class="line">  <span class="attribute">background</span>: <span class="number">#3071a9</span>;</span><span class="line">&#125;</span><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">:focus</span><span class="selector-pseudo">::-ms-fill-upper</span> &#123;</span><span class="line">  <span class="attribute">background</span>: <span class="number">#367ebd</span>;</span><span class="line">&#125;</span></pre></td></tr></table></figure><p>完整的效果如下：</p><p><img src="/images/styled-input.png" alt="range-input"></p><p>更多内容请阅读 <a href="https://css-tricks.com/styling-cross-browser-compatible-range-inputs-css/" target="_blank" rel="external">原文</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近由于业务需求需要做一个控制音量的滑块按钮组件，由于 js 实现起来比较复杂，需要考虑 &lt;code&gt;touch&lt;/code&gt; 和 &lt;code&gt;click&lt;/code&gt; 之间的切换。所以决定使用 h5 新增的 input range 来实现，只要改掉其默认样式就好。&lt;/p&gt;
      
    
    </summary>
    
      <category term="前端" scheme="https://newming.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="https://newming.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>IT 必备词汇</title>
    <link href="https://newming.github.io/2017/11/03/words-for-it/"/>
    <id>https://newming.github.io/2017/11/03/words-for-it/</id>
    <published>2017-11-03T02:10:29.000Z</published>
    <updated>2017-11-03T02:25:36.423Z</updated>
    
    <content type="html"><![CDATA[<p>This document will put some words in common usage</p><ul><li>serial 连续的（中间件的处理，one after another）</li><li>parallel 平行的</li><li>exected 执行</li><li>faded 消失</li><li>reliable 可靠地</li><li>secure 安全的</li><li>offine mode 离线模式</li><li>deterministic 确定性</li><li>network performance 网络性能</li><li>queue up 排队</li><li>avoid 避免</li><li>upgrade 升级</li><li>continuous integration 持续集成</li><li>authority 权利，权限</li><li>authorise 授权，批准，委托</li><li>stability: 稳定性</li><li>standard: 标准的</li><li>constant: n常量</li><li>variable: n变量</li><li>dictionary: n字典</li><li>integer: n整数，整型</li><li>keyword n关键字</li><li>static: adj静态的</li><li>class: n 类</li><li>subclass: n 子类</li><li>superclass: n父类</li><li>polymorphism: n多态 inherit v继承</li><li>inheritance: n继承</li><li>interface: n接口</li><li>structure: n结构</li><li>instance: n 实例</li><li>property: n 属性</li><li>enumeration: n枚举</li><li>function: n 函数</li><li>parameter: n 参数</li><li>functionality: n功能</li><li>method: n 方法</li><li>element: n元素</li><li>call: v 调用</li><li>random: adj 随机的</li><li>generate: v产生，生成</li><li>generator: n生成器</li><li>implement: v实现</li><li>implementation: n实现</li><li>expression: n表达式</li><li>scope: n 范围 区域</li><li>initial: adj 最初的</li><li>initializer: n 初始化方法</li><li>initialization n初始化</li><li>deinitializer: n析构方法</li><li>item: n 项目; 条，条款; 一则</li><li>encapsulate: v封装</li><li>protocol: n 协议</li><li>delegate: v代理</li><li>delegation: n 代理</li><li>extend: v 拓展</li><li>extension: n拓展</li><li>external: adj 外部的</li><li>conform: v 遵守，遵照，遵循</li><li>iterate: v迭代</li><li>loop: n 循环</li><li>downcast: v向下转型</li><li>unwrap: v 拆箱</li><li>force-unwrap: v 强制拆箱</li><li>statement: n声明</li><li>optional: adj 可选的</li><li>code snippet: n 代码片段</li><li>define: v 定义</li><li>definition: n定义</li><li>contain: v 包含</li><li>query: v查询</li><li>particular: adj 特定的</li><li>type casting: 类型转换</li><li>cast: v 转换</li><li>operator: n 操作符</li><li>hierarchy: n 层次体系</li><li>subscript: n脚本</li><li>comma: n冒号</li><li>access: v访问，获取</li><li>exclamation mark: n感叹号</li><li>assign: v 赋值</li><li>assignment: n赋值</li><li>increase: v 增加 ，增大，增多</li><li>increasement: n 增加 ，增大，增多</li><li>decrease: v减少，减小</li><li>decreasement: v 减少，减小</li><li>global: adj 全局的</li><li>closure: n闭包</li><li>allocate: v分配</li><li>memory: n内存</li><li>reference: n引用</li><li>observe: v观察</li><li>observer: n观察者</li><li>modify: v修改</li><li>format: n格式</li><li>sort: v排序</li><li>nested: adj 嵌套的</li><li>reuse: v复用，重用</li><li>entity: n实体</li><li>public: adj 公共的，公开的</li><li>private: adj 私有的</li><li>internal: adj内部的</li><li>framework: n框架</li><li>unit test: 单元测试</li><li>associate: v关联</li><li>generic: n 范型</li><li>collection: n集合</li><li>swap: v交换</li><li>original: adj初始的</li><li>compile: v编译</li><li>characteristic: n性质</li><li>override: v重写，复写</li><li>overload: v重载</li><li>index: n索引</li><li>syntax: n语法</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This document will put some words in common usage&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;serial 连续的（中间件的处理，one after another）&lt;/li&gt;
&lt;li&gt;parallel 平行的&lt;/li&gt;
&lt;li&gt;execte
      
    
    </summary>
    
      <category term="前端" scheme="https://newming.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="English" scheme="https://newming.github.io/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>数组排序算法</title>
    <link href="https://newming.github.io/2017/09/21/arrsort/"/>
    <id>https://newming.github.io/2017/09/21/arrsort/</id>
    <published>2017-09-21T01:53:16.000Z</published>
    <updated>2018-03-05T05:49:09.856Z</updated>
    
    <content type="html"><![CDATA[<p>简单实现3种数组排序</p><ul><li>冒泡排序</li><li>快速排序</li><li>插入排序</li></ul><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span><span class="line">45</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">12</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">4</span>];</span><span class="line"><span class="comment">// target: [4,8,10,12,13] 从小到大排序</span></span><span class="line"><span class="comment">// 思想：当前项和后一项进行比较，如果当前项大于后一项，两者交换位置</span></span><span class="line"><span class="comment">/*</span></span><span class="line"><span class="comment">  第一轮比较四次，将最大的已经放到最后了，接下来下一轮，一共需要arr.length-1轮</span></span><span class="line"><span class="comment">  [10,12,13,8,4]</span></span><span class="line"><span class="comment">  [10,12,13,8,4]</span></span><span class="line"><span class="comment">  [10,12,8,13,4]</span></span><span class="line"><span class="comment">  [10,12,8,4,13]</span></span><span class="line"><span class="comment">  接下来第二轮比较三次</span></span><span class="line"><span class="comment"></span></span><span class="line"><span class="comment">  i控制轮数，从0开始的话</span></span><span class="line"><span class="comment">  i=0第一轮 比较arr.length-1-0次</span></span><span class="line"><span class="comment">  i=1第一轮 比较arr.length-1-1次</span></span><span class="line"><span class="comment">  i=2第一轮 比较arr.length-1-2次</span></span><span class="line"><span class="comment">  ...</span></span><span class="line"><span class="comment">  i=n第n轮 比较arr.length-1-n次</span></span><span class="line"><span class="comment"></span></span><span class="line"><span class="comment">  当当前项大于后一下交换位置</span></span><span class="line"><span class="comment">  var a = 12;</span></span><span class="line"><span class="comment">  var b = 13;</span></span><span class="line"><span class="comment">  var c = null;</span></span><span class="line"><span class="comment">  c = a;</span></span><span class="line"><span class="comment">  a = b;</span></span><span class="line"><span class="comment">  b = c</span></span><span class="line"><span class="comment">*/</span></span><span class="line"></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortAry</span>(<span class="params">ary</span>)</span>&#123;</span><span class="line">  <span class="comment">// i代表轮数，比较ary.length-1次</span></span><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ary.length<span class="number">-1</span>; i++) &#123;</span><span class="line">    <span class="comment">// 比较arr.length-1-i次，j代表每一轮比较的次数,不用和自己比，不用和上一轮最后一项的最大值比较</span></span><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; ary.length<span class="number">-1</span>-i; j++) &#123;</span><span class="line">      <span class="keyword">var</span> cur = ary[j],next = ary[j+<span class="number">1</span>];</span><span class="line">      <span class="keyword">if</span> (cur&gt;next) &#123;</span><span class="line">        <span class="comment">// 如果当前项大于下一项，交换位置</span></span><span class="line">        <span class="keyword">var</span> temp = <span class="literal">null</span>;</span><span class="line">        temp = ary[j];</span><span class="line">        ary[j] = ary[j+<span class="number">1</span>];</span><span class="line">        ary[j+<span class="number">1</span>] = temp;</span><span class="line">      &#125;</span><span class="line">    &#125;</span><span class="line">  &#125;</span><span class="line">&#125;</span><span class="line">sortAry(arr)</span><span class="line"><span class="built_in">console</span>.log(arr);</span></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>从数组的中间拿一个值，然后通过这个值挨个和数组里面的值进行比较，如果大于的放一边，小于的放一边，然后把这些合并，再进行比较，如此反复即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">21</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">63</span>];</span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortA</span>(<span class="params">arr</span>)</span>&#123;</span><span class="line">  <span class="comment">// 如果只有一位，就没有必要比较</span></span><span class="line">  <span class="keyword">if</span>(arr.length&lt;=<span class="number">1</span>)&#123;</span><span class="line">      <span class="keyword">return</span> arr;</span><span class="line">  &#125;</span><span class="line">  <span class="comment">// 获取中间值的索引</span></span><span class="line">  <span class="keyword">var</span> len = <span class="built_in">Math</span>.floor(arr.length/<span class="number">2</span>);</span><span class="line">  <span class="comment">// 截取中间值</span></span><span class="line">  <span class="keyword">var</span> cur = arr.splice(len,<span class="number">1</span>);</span><span class="line">  <span class="comment">// 小于中间值放这里面</span></span><span class="line">  <span class="keyword">var</span> left = [];</span><span class="line">  <span class="comment">// 大于的放着里面</span></span><span class="line">  <span class="keyword">var</span> right = [];</span><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><span class="line">      <span class="comment">// 判断是否大于</span></span><span class="line">      <span class="keyword">if</span>(cur&gt;arr[i])&#123;</span><span class="line">          left.push(arr[i]);</span><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><span class="line">          right.push(arr[i]);</span><span class="line">      &#125;</span><span class="line">  &#125;</span><span class="line">  <span class="comment">// 通过递归，上一轮比较好的数组合并，并且再次进行比较。</span></span><span class="line">  <span class="keyword">return</span> sortA(left).concat(cur,sortA(right));</span><span class="line">  <span class="built_in">console</span>.log(sortA(left).concat(cur,sortA(right)););</span><span class="line">&#125;</span><span class="line"><span class="built_in">console</span>.log(sortA(arr));</span></pre></td></tr></table></figure><p>额，理解起来比较难，画了个图<br><img src="/images/quicksort.png" alt="quicksort"></p><h2 id="插入排序-INSERTION-SORT"><a href="#插入排序-INSERTION-SORT" class="headerlink" title="插入排序(INSERTION-SORT)"></a>插入排序(INSERTION-SORT)</h2><p>插入排序：对于少量元素比较有效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">elements</span>)</span>&#123;</span><span class="line">  <span class="comment">//假设第0个元素是一个有序的数列，第1个以后的是无序的序列，</span></span><span class="line">  <span class="comment">//所以从第1个元素开始将无序数列的元素插入到有序数列中</span></span><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; elements.length; i++)&#123;</span><span class="line">    <span class="comment">//升序</span></span><span class="line">    <span class="keyword">if</span>(elements[i] &lt; elements[i<span class="number">-1</span>])&#123;</span><span class="line">      <span class="comment">//取出无序数列中的第i个作为被插入元素</span></span><span class="line">      <span class="keyword">var</span> guard = elements[i];</span><span class="line">      <span class="comment">//记住有序数列的最后一个位置，并且将有序数列位置扩大一个</span></span><span class="line">      <span class="keyword">var</span> j = i - <span class="number">1</span>;</span><span class="line">      <span class="comment">// elements[i] = elements[j]; // 我发现这句是多余的</span></span><span class="line"></span><span class="line">      <span class="comment">//比大小，找到被插入元素所在的位置</span></span><span class="line">      <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; guard &lt; elements[j])&#123;</span><span class="line">        elements[j+<span class="number">1</span>] = elements[j];</span><span class="line">        j--;</span><span class="line">      &#125;</span><span class="line"></span><span class="line">      <span class="comment">//插入</span></span><span class="line">      elements[j+<span class="number">1</span>] = guard;</span><span class="line">    &#125;</span><span class="line">  &#125;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="keyword">var</span> elements = [<span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>];</span><span class="line"><span class="built_in">console</span>.log(<span class="string">'before: '</span> + elements);</span><span class="line">sort(elements);</span><span class="line"><span class="built_in">console</span>.log(<span class="string">' after: '</span> + elements);</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简单实现3种数组排序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;冒泡排序&lt;/li&gt;
&lt;li&gt;快速排序&lt;/li&gt;
&lt;li&gt;插入排序&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排
      
    
    </summary>
    
      <category term="前端" scheme="https://newming.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="https://newming.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>introduce</title>
    <link href="https://newming.github.io/2017/09/07/introduce/"/>
    <id>https://newming.github.io/2017/09/07/introduce/</id>
    <published>2017-09-07T04:59:46.000Z</published>
    <updated>2018-03-05T04:57:28.518Z</updated>
    
    <content type="html"><![CDATA[<p>关于本博客介绍</p><p>随手记录工作中的一些经验新得，或者是一些其他的东西。内容可能会涉及前端(主要)，后端，数据库，nginx，网站，英语等等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于本博客介绍&lt;/p&gt;
&lt;p&gt;随手记录工作中的一些经验新得，或者是一些其他的东西。内容可能会涉及前端(主要)，后端，数据库，nginx，网站，英语等等。&lt;/p&gt;

      
    
    </summary>
    
      <category term="文章" scheme="https://newming.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
</feed>
